{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\r\ngit branch [새 브랜치 이름] : 새로운 브랜치를 생성\r\ngit checkout -b [새 브랜치 이름] : 새로운 브랜치를 생성하고 그 브랜치로 바로 이동\r\ngit branch -d [기존 브랜치 이름] : 브랜치 삭제\r\ngit checkout [기존 브랜치 이름] : 그 브랜치로 이동\r\ngit merge [기존 브랜치 이름] : 현재 브랜치에 다른 브랜치를 머지\r\ngit merge --abort : 머지를 하다가 conflict가 발생했을 때, 일단은 머지 작업을 취소하고 이전 상태로 돌아감\r\n","excerpt":"git branch 새 브랜치 이름 : 새로운 브랜치를 생성\ngit checkout -b 새 브랜치 이름 : 새로운 브랜치를 생성하고 그 브랜치로 바로 이동\ngit branch -d 기존 브랜치 이름 : 브랜치 삭제\ngit checkout 기존 브랜…","fields":{"slug":"/Git-study_4/"},"frontmatter":{"date":"Aug 17, 2021","title":"branch 정리 노트","tags":["undefined"],"update":"Aug 17, 2021"}}},{"node":{"rawMarkdownBody":"\r\ngit fetch : 로컬 레포지토리에서 현재 HEAD가 가리키는 브랜치의 업스트림(upstream) 브랜치로부터 최신 커밋들을 가져옴(가져오기만 한다는 점에서, 가져와서 머지까지 하는 git pull과는 차이가 있음)\r\ngit blame : 특정 파일의 내용 한줄한줄이 어떤 커밋에 의해 생긴 것인지 출력\r\ngit revert : 특정 커밋에서 이루어진 작업을 되돌리는(취소하는) 커밋을 새로 생성\r\n","excerpt":"git fetch : 로컬 레포지토리에서 현재 HEAD가 가리키는 브랜치의 업스트림(upstream) 브랜치로부터 최신 커밋들을 가져옴(가져오기만 한다는 점에서, 가져와서 머지까지 하는 git pull과는 차이가 있음)\ngit blame : 특정 파…","fields":{"slug":"/Git-study_5/"},"frontmatter":{"date":"Aug 17, 2021","title":"Git 협업하기 정리 노트","tags":["undefined"],"update":"Aug 17, 2021"}}},{"node":{"rawMarkdownBody":"\r\nGit 써보기\r\ngit init : 현재 디렉토리를 Git이 관리하는 프로젝트 디렉토리(=working directory)로 설정하고 그 안에 레포지토리(.git 디렉토리) 생성\r\ngit config user.name 'codeit' : 현재 사용자의 아이디를 'codeit'으로 설정(커밋할 때 필요한 정보)\r\ngit config user.email 'teacher@codeit.kr' : 현재 사용자의 이메일 주소를 'teacher@codeit.kr'로 설정(커밋할 때 필요한 정보)\r\ngit add [파일 이름] : 수정사항이 있는 특정 파일을 staging area에 올리기\r\ngit add [디렉토리명] : 해당 디렉토리 내에서 수정사항이 있는 모든 파일들을 staging area에 올리기\r\ngit add . : working directory 내의 수정사항이 있는 모든 파일들을 staging area에 올리기\r\ngit reset [파일 이름] : staging area에 올렸던 파일 다시 내리기\r\ngit status : Git이 현재 인식하고 있는 프로젝트 관련 내용들 출력(문제 상황이 발생했을 때 현재 상태를 파악하기 위해 활용하면 좋음)\r\ngit commit -m \"커밋 메시지\" : 현재 staging area에 있는 것들 커밋으로 남기기\r\ngit help [커맨드 이름] : 사용법이 궁금한 Git 커맨드의 공식 메뉴얼 내용 출력\r\n\r\nGitHub 시작하기\r\ngit push -u(또는 --set-upstream) origin master : 로컬 레포지토리의 내용을 처음으로 리모트 레포지토리에 올릴 때 사용합니다.\r\ngit push : 위의 커맨드를 한번 실행하고 난 후에는 git push라고만 쳐도 로컬 레포지토리의 내용을 리모트 레포지토리에 올릴 수 있습니다.\r\ngit pull : 바로 위의 위에 있는 커맨드를 한번 실행하고 난 후에는 git pull이라고만 쳐도 리모트 레포지토리의 내용을 로컬 레포지토리로 가져옵니다.\r\ngit clone [프로젝트의 GitHub 상 주소] : GitHub에 있는 프로젝트를 내 컴퓨터로 가져오기\r\n\r\nGit에서 커밋 다루기\r\ngit log : 커밋 히스토리를 출력\r\ngit log --pretty=oneline : --pretty 옵션을 사용하면 커밋 히스토리를 다양한 방식으로 출력할 수 있습니다. --pretty 옵션에 oneline이라는 값을 주면 커밋 하나당 한 줄씩 출력해줍니다. --pretty 옵션에 대해 더 자세히 알고싶으면 이 링크를 참고하세요.\r\ngit show [커밋 아이디] : 특정 커밋에서 어떤 변경사항이 있었는지 확인\r\ngit commit --amend : 최신 커밋을 다시 수정해서 새로운 커밋으로 만듦\r\ngit config alias.[별명] [커맨드] : 길이가 긴 커맨드에 별명을 붙여서 이후로는 별명으로도 해당 커맨드를 실행할 수 있게 설정\r\ngit diff [커밋 A의 아이디] [커밋 B의 아이디] : 두 커밋 간의 차이 비교\r\ngit reset [옵션] [커밋 아이디] : 옵션에 따라 하는 작업이 달라짐(옵션을 생략하면 --mixed 옵션이 적용됨)\r\n(1) HEAD가 특정 커밋을 가리키도록 이동시킴(--soft는 여기까지 수행)\r\n\r\n    \t(2) staging area도 특정 커밋처럼 리셋(--mixed는 여기까지 수행)\r\n\r\n    \t(3) working directory도 특정 커밋처럼 리셋(--hard는 여기까지 수행)\r\n\r\n    \t그리고 이때 커밋 아이디 대신 HEAD의 위치를 기준으로 한 표기법(예 : HEAD^, HEAD~3)을 사용해도 됨\r\n\r\ngit tag [태그 이름] [커밋 아이디] : 특정 커밋에 태그를 붙임\r\n\r\nGit에서 브랜치 사용하기\r\ngit branch [새 브랜치 이름] : 새로운 브랜치를 생성\r\ngit checkout -b [새 브랜치 이름] : 새로운 브랜치를 생성하고 그 브랜치로 바로 이동\r\ngit branch -d [기존 브랜치 이름] : 브랜치 삭제\r\ngit checkout [기존 브랜치 이름] : 그 브랜치로 이동\r\ngit merge [기존 브랜치 이름] : 현재 브랜치에 다른 브랜치를 머지\r\ngit merge --abort : 머지를 하다가 conflict가 발생했을 때, 일단은 머지 작업을 취소하고 이전 상태로 돌아감\r\n\r\nGit 실전 I\r\ngit fetch : 로컬 레포지토리에서 현재 HEAD가 가리키는 브랜치의 업스트림(upstream) 브랜치로부터 최신 커밋들을 가져옴(가져오기만 한다는 점에서, 가져와서 머지까지 하는 git pull과는 차이가 있음)\r\ngit blame : 특정 파일의 내용 한줄한줄이 어떤 커밋에 의해 생긴 것인지 출력\r\ngit revert : 특정 커밋에서 이루어진 작업을 되돌리는(취소하는) 커밋을 새로 생성\r\n\r\nGit 실전 Ⅱ\r\ngit reflog : HEAD가 그동안 가리켜왔던 커밋들의 기록을 출력\r\ngit log --all --graph : 모든 브랜치의 커밋 히스토리를, 커밋 간의 관계가 잘 드러나도록 그래프 형식으로 출력\r\ngit rebase [브랜치 이름] : A, B 브랜치가 있는 상태에서 지금 HEAD가 A 브랜치를 가리킬 때, git rebase B를 실행하면 A, B 브랜치가 분기하는 시작점이 된 공통 커밋 이후로부터 존재하는 A 브랜치 상의 커밋들이 그대로 B 브랜치의 최신 커밋 이후로 이어붙여짐(git merge와 같은 효과를 가지지만 커밋 히스토리가 한 줄로 깔끔하게 된다는 차이점이 있음)\r\ngit stash : 현재 작업 내용을 스택 영역에 저장\r\ngit stash apply [커밋 아이디] : 스택 영역에 저장된 가장 최근의(혹은 특정) 작업 내용을 working directory에 적용\r\ngit stash drop [커밋 아이디] : 스택 영역에 저장된 가장 최근의(혹은 특정) 작업 내용을 스택에서 삭제\r\ngit stash pop [커밋 아이디] : 스택 영역에 저장된 가장 최근의(혹은 특정) 작업 내용을 working directory에 적용하면서 스택에서 삭제\r\ngit cherry-pick [커밋 아이디] : 특정 커밋의 내용을 현재 커밋에 반영\r\n! 그 밖에 알아야할 사실\r\n\r\n(1) git commit이라고만 쓰고 실행하면 커밋 메시지를 입력할 수 있는 텍스트 에디터 창이 뜹니다. 거기서 커밋 메시지를 입력하고 저장하고 나면 커밋이 이루어집니다.\r\n\r\n(2) git push와 git pull은 그 작업 단위가 브랜치입니다. 예를 들어, master 브랜치에서 git push를 하면 master 브랜치의 내용만 리모트 레포지토리의 master 브랜치로 전송되지, premium 브랜치의 내용이 전송되는 것은 아닙니다.(git push에 --all이라는 옵션을 주면 모든 브랜치의 내용을 전송할 수 있기는 합니다.)\r\n","excerpt":"Git 써보기\ngit init : 현재 디렉토리를 Git이 관리하는 프로젝트 디렉토리(=working directory)로 설정하고 그 안에 레포지토리(.git 디렉토리) 생성\ngit config user.name 'codeit' : 현재 사용자의 …","fields":{"slug":"/Git-study_6/"},"frontmatter":{"date":"Aug 17, 2021","title":"Git 내용 총정리 노트","tags":["undefined"],"update":"Aug 17, 2021"}}},{"node":{"rawMarkdownBody":"\r\n오늘의 느낀점..github에서 저장소 생성할시에 readme 파일 생성하는건 잘생각하고 하자...\r\n","excerpt":"오늘의 느낀점..github에서 저장소 생성할시에 readme 파일 생성하는건 잘생각하고 하자...","fields":{"slug":"/first-post/"},"frontmatter":{"date":"Aug 16, 2021","title":"Blog test","tags":["undefined"],"update":"Aug 16, 2021"}}},{"node":{"rawMarkdownBody":"\r\ngit init : 현재 디렉토리를 Git이 관리하는 프로젝트 디렉토리(=working directory)로 설정하고 그 안에 레포지토리(.git 디렉토리) 생성\r\ngit config user.name 'codeit' : 현재 사용자의 아이디를 'codeit'으로 설정(커밋할 때 필요한 정보)\r\ngit config user.email 'teacher@codeit.kr' : 현재 사용자의 이메일 주소를 'teacher@codeit.kr'로 설정(커밋할 때 필요한 정보)\r\ngit add [파일 이름] : 수정사항이 있는 특정 파일을 staging area에 올리기\r\ngit add [디렉토리명] : 해당 디렉토리 내에서 수정사항이 있는 모든 파일들을 staging area에 올리기\r\ngit add . : working directory 내의 수정사항이 있는 모든 파일들을 staging area에 올리기\r\ngit reset [파일 이름] : staging area에 올렸던 파일 다시 내리기\r\ngit status : Git이 현재 인식하고 있는 프로젝트 관련 내용들 출력(문제 상황이 발생했을 때 현재 상태를 파악하기 위해 활용하면 좋음)\r\ngit commit -m \"커밋 메시지\" : 현재 staging area에 있는 것들 커밋으로 남기기\r\ngit help [커맨드 이름] : 사용법이 궁금한 Git 커맨드의 공식 메뉴얼 내용 출력\r\n","excerpt":"git init : 현재 디렉토리를 Git이 관리하는 프로젝트 디렉토리(=working directory)로 설정하고 그 안에 레포지토리(.git 디렉토리) 생성\ngit config user.name 'codeit' : 현재 사용자의 아이디를 'co…","fields":{"slug":"/Git-study_1/"},"frontmatter":{"date":"Aug 16, 2021","title":"Git 써보기 정리 노트","tags":["undefined"],"update":"Aug 16, 2021"}}},{"node":{"rawMarkdownBody":"\r\ngit push -u origin master : 로컬 레포지토리의 내용을 처음으로 리모트 레포지토리에 올릴 때 사용합니다.\r\ngit push : 로컬 레포지토리의 내용을 리모트 레포지토리에 보내기\r\ngit pull : 리모트 레포지토리의 내용을 로컬 레포지토리로 가져오기\r\ngit clone [프로젝트의 GitHub 상 주소] : GitHub에 있는 프로젝트를 내 컴퓨터로 가져오기\r\n","excerpt":"git push -u origin master : 로컬 레포지토리의 내용을 처음으로 리모트 레포지토리에 올릴 때 사용합니다.\ngit push : 로컬 레포지토리의 내용을 리모트 레포지토리에 보내기\ngit pull : 리모트 레포지토리의 내용을 로컬 …","fields":{"slug":"/Git-study_2/"},"frontmatter":{"date":"Aug 16, 2021","title":"GitHub 시작하기 정리 노트","tags":["undefined"],"update":"Aug 16, 2021"}}},{"node":{"rawMarkdownBody":"\r\ngit log : 커밋 히스토리를 출력\r\ngit log --pretty=oneline : --pretty 옵션을 사용하면 커밋 히스토리를 다양한 방식으로 출력할 수 있습니다. --pretty 옵션에 oneline이라는 값을 주면 커밋 하나당 한 줄씩 출력해줍니다. --pretty 옵션에 대해 더 자세히 알고싶으면 이 링크를 참고하세요.\r\ngit show [커밋 아이디] : 특정 커밋에서 어떤 변경사항이 있었는지 확인\r\ngit commit --amend : 최신 커밋을 다시 수정해서 새로운 커밋으로 만듦\r\ngit config alias.[별명] [커맨드] : 길이가 긴 커맨드에 별명을 붙여서 이후로 별명으로 해당 커맨드를 실행할 수 있도록 설정\r\ngit diff [커밋 A의 아이디] [커밋 B의 아이디] : 두 커밋 간의 차이 비교\r\ngit reset [옵션] [커밋 아이디] : 옵션에 따라 하는 작업이 달라짐(옵션을 생략하면 --mixed 옵션이 적용됨)\r\n(1) HEAD가 특정 커밋을 가리키도록 이동시킴(--soft는 여기까지 수행)\r\n\r\n    \t(2) staging area도 특정 커밋처럼 리셋(--mixed는 여기까지 수행)\r\n\r\n    \t(3) working directory도 특정 커밋처럼 리셋(--hard는 여기까지 수행)\r\n\r\n    \t그리고 이때 커밋 아이디 대신 HEAD의 위치를 기준으로 한 표기법(예 : HEAD^, HEAD~3)을 사용해도 됨\r\n\r\ngit tag [태그 이름] [커밋 아이디] : 특정 커밋에 태그를 붙임\r\n","excerpt":"git log : 커밋 히스토리를 출력\ngit log --pretty=oneline : --pretty 옵션을 사용하면 커밋 히스토리를 다양한 방식으로 출력할 수 있습니다. --pretty 옵션에 oneline이라는 값을 주면 커밋 하나당 한 줄씩 …","fields":{"slug":"/Git-study_3/"},"frontmatter":{"date":"Aug 16, 2021","title":"commit 정리 노트","tags":["undefined"],"update":"Aug 16, 2021"}}},{"node":{"rawMarkdownBody":"\r\n![](screenshot.png)\r\n\r\n이미지 파일이 첨부된 게시물의 예제입니다.\r\n\r\n폴더를 만들고 폴더의 제목이 해당 게시물의 주소가 됩니다.\r\n\r\n게시물 파일명은 index.md 로 합니다.\r\n\r\n이미지 파일은 폴더 내에 위치시킵니다.\r\n\r\n자세한 가이드는 [Documents](<https://github.com/junhobaik/junhobaik.github.io/wiki/Document-(Borderless)>)를 확인해주세요.\r\n","excerpt":"이미지 파일이 첨부된 게시물의 예제입니다. 폴더를 만들고 폴더의 제목이 해당 게시물의 주소가 됩니다. 게시물 파일명은 index.md 로 합니다. 이미지 파일은 폴더 내에 위치시킵니다. 자세한 가이드는 Documents를 확인해주세요.","fields":{"slug":"/image-post-example.md/"},"frontmatter":{"date":"Mar 24, 1991","title":"Image, 이미지 게시물 예제","tags":["undefined"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n게시물에 태그를 지정할 수 있습니다.\r\n\r\n해당 게시물의 Markdown YAML Front matter은 아래와 같습니다.\r\n\r\n```\r\n---\r\ntitle: Tag, 태그 게시물 예제\r\ndate: 2019-07-30\r\ntags:\r\n  - tag\r\n  - 태그\r\n---\r\n```\r\n\r\n가이드의 Markdown YAML Front matter를 참고하세요.\r\n\r\n자세한 가이드는 [Documents](<https://github.com/junhobaik/junhobaik.github.io/wiki/Document-(Borderless)>)를 확인해주세요.\r\n","excerpt":"게시물에 태그를 지정할 수 있습니다. 해당 게시물의 Markdown YAML Front matter은 아래와 같습니다. 가이드의 Markdown YAML Front matter를 참고하세요. 자세한 가이드는 Documents를 확인해주세요.","fields":{"slug":"/tag-post-example/"},"frontmatter":{"date":"Mar 24, 1991","title":"Tag, 태그 게시물 예제","tags":["tag","태그"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}