{"componentChunkName":"component---src-templates-post-tsx","path":"/Git-study_3/","result":{"data":{"markdownRemark":{"html":"<p>git log : 커밋 히스토리를 출력\ngit log --pretty=oneline : --pretty 옵션을 사용하면 커밋 히스토리를 다양한 방식으로 출력할 수 있습니다. --pretty 옵션에 oneline이라는 값을 주면 커밋 하나당 한 줄씩 출력해줍니다. --pretty 옵션에 대해 더 자세히 알고싶으면 이 링크를 참고하세요.\ngit show [커밋 아이디] : 특정 커밋에서 어떤 변경사항이 있었는지 확인\ngit commit --amend : 최신 커밋을 다시 수정해서 새로운 커밋으로 만듦\ngit config alias.[별명] [커맨드] : 길이가 긴 커맨드에 별명을 붙여서 이후로 별명으로 해당 커맨드를 실행할 수 있도록 설정\ngit diff [커밋 A의 아이디] [커밋 B의 아이디] : 두 커밋 간의 차이 비교\ngit reset [옵션] [커밋 아이디] : 옵션에 따라 하는 작업이 달라짐(옵션을 생략하면 --mixed 옵션이 적용됨)\n(1) HEAD가 특정 커밋을 가리키도록 이동시킴(--soft는 여기까지 수행)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\t(2) staging area도 특정 커밋처럼 리셋(--mixed는 여기까지 수행)\n\n\t(3) working directory도 특정 커밋처럼 리셋(--hard는 여기까지 수행)\n\n\t그리고 이때 커밋 아이디 대신 HEAD의 위치를 기준으로 한 표기법(예 : HEAD^, HEAD~3)을 사용해도 됨</code></pre></div>\n<p>git tag [태그 이름] [커밋 아이디] : 특정 커밋에 태그를 붙임</p>","excerpt":"git log : 커밋 히스토리를 출력\ngit log --pretty=oneline : --pretty 옵션을 사용하면 커밋 히스토리를 다양한 방식으로 출력할 수 있습니다. --pretty 옵션에 oneline이라는 값을 주면 커밋 하나당 한 줄씩 …","tableOfContents":"","fields":{"slug":"/Git-study_3/"},"frontmatter":{"title":"commit 정리 노트","date":"Aug 16, 2021","tags":["git"],"keywords":["Dev.seungwon Jang","seungwon Jang"],"update":"Aug 16, 2021"}}},"pageContext":{"slug":"/Git-study_3/","series":[{"slug":"/Git-study_1/","title":"Git 써보기 정리 노트","num":1},{"slug":"/Git-study_2/","title":"GitHub 시작하기 정리 노트","num":2},{"slug":"/Git-study_3/","title":"commit 정리 노트","num":3},{"slug":"/Git-study_4/","title":"branch 정리 노트","num":4},{"slug":"/Git-study_5/","title":"Git 협업하기 정리 노트","num":5},{"slug":"/Git-study_6/","title":"Git 내용 총정리 노트","num":6}],"lastmod":"2021-08-16"}},"staticQueryHashes":["2027115977","694178885"]}