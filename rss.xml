<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Dev.seungwon Jang | Feed]]></title><description><![CDATA[seungwon Jang's Development Blog]]></description><link>https://nicorobinv.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 21 Oct 2021 07:06:46 GMT</lastBuildDate><item><title><![CDATA[javascript 타입 값 변수]]></title><description><![CDATA[프로그래밍 언어로 다룰 수 있는 값의 유형을 데이터 타입이라고 한다. 프로그래밍 언어의 가장 기본적인 특징 중 하나는 바로 그 언어가 지원하는 데이터 타입의 종류다. 한편, 프로그램은 값이 유지될 필요가 있을 때, 변수에 값을 할당(저장)한다. 변수…]]></description><link>https://nicorobinv.github.io/javascript-study_2/</link><guid isPermaLink="false">https://nicorobinv.github.io/javascript-study_2/</guid><pubDate>Thu, 21 Oct 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;프로그래밍 언어로 다룰 수 있는 값의 유형을 데이터 타입이라고 한다. 프로그래밍 언어의 가장 기본적인 특징 중 하나는 바로 그 언어가 지원하는 데이터 타입의 종류다. 한편, 프로그램은 값이 유지될 필요가 있을 때, 변수에 값을 할당(저장)한다. 변수명은 그 값의 이름이므로, 그 이름을 통하면 값을 참조할 수 있다. 이러한 변수의 작동 방식도 일반적인 프로그램 언어가 갖는 기본 특징 중 하나다. 이 번 장에서는 자바스크립트의 데이터 타입과 값, 변수에 대해 설명한다. 자바스크립트의 타입은 크게 원시 타입(primitive type)과 객체 타입(object type)으로 나뉘고, 원시 타입으로는 숫자, 텍스트의 나열(문자열, string), 불리언 진리 값(불리언, boolean이라고 함)이 있다.&lt;/p&gt;
&lt;p&gt;자바스크립트에서 null과 undefined는 원시값이긴 하지만, 숫자도 아니고, 문자열이나 불리언도 아니다. 자바스크립트에서 null과 undefined는 자기 자신만을 값으로 갖는 독립적인 타입에 속한다.&lt;/p&gt;
&lt;p&gt;숫자와 문자열, 불리언, null, undefined 외의 값은 객체다. 객체(즉, object 타입의 멤버)는 이름과 값을 갖는 프로퍼티의 집합이다(여기서 값은 숫자나 문자열 같은 기본 데이터 타입 값이 될 수도 있고 객체가 될 수도 있다). 일반적인 자바스크립트 객체는 순서가 없는 값들의 집합이며, 각 값에는 이름이 지정(named)되어 있다. 한편 자바스크립트에는 배열(array)이라고 알려진 특별한 종류의 객체도 있다. 배열은순서가 있는 값들의 집합이며, 각 값에는 번호(index)가 부여된다. 자바스크립트 언어는 배열을 다루는 독특한 문법을 가지고 있다.
배열은 일반적인 객체와는 다르게 동작한다.&lt;/p&gt;
&lt;p&gt;자바스크립트는 함수라고 부르는 특별한 객체도 갖고 있다. 함수는 실행 코드를 가지고 있는 객체로서, 함수를 호출하면 코드가 수행되고 계산된 값이 반환된다. 배열과 마찬가지로 함수는 일반 객체와 다르게 동작한다. 그리고 자바스크립트는 함수를 실행하기 위한 특별한 문법을 가지고 있다. 함수에 대해 알아야 할 가장 중요한 점은 함수는 값이고, 자바스크립트 프로그램은 함수를 보통 객체처럼 다룰 수 있다는 점이다.&lt;/p&gt;
&lt;p&gt;함수 중에는 새로 생성된 객체를 (new 연산자를 이용하여) 초기화하기 위해 사용되는 함수가 있는데, 이를 생성자(constructor)함수라고 한다. 생성자는 객체들의 클래스를 정의한다. 여기서 객체는 생성자로 초기화되는 대상을 말한다. 클래스는 객체 타입의 하위 타입(subtyoe)으로 생각할 수 있다. 코어 자바스크립트에서는 Array와 Function 클래스뿐만 아니라 세 개의 다른 유용한 클래스들을 정의하고 있다. Date 클래스는 날짜를 표현하는 객체를 정의하고, RegExp 클래스는 정규 표현식을 표현하는 객체를 정의한다(강력한 패턴 매칭 도구). 그리고 Error 클래스는 자바스크립트 프로그램에서 발생 할 수 있는 문법과 런타임 에러를 표현하는 객체를 정의한다. 적절한 생성자 함수를 이용하여 자신만의 클래스를 정의할 수도 있다.&lt;/p&gt;
&lt;p&gt;자바스크립트 인터프리터는 메모리 관리를 위해 자동으로 가비지 컬렉션(garbage collection)을 수행한다. 프로그램이 필요할 때 객체를 생성할 수 있고, 프로그래머는 이 객체를 어떻게 해제할지 걱정할 필요가 없다. 객체에 더 이상 접근할 수 없을 때(프로그램이 더 이상 객체를 참조하지 않을 때) 인터프리터는 그 객체가 다시 사용되지 않을 거라 판단하고 자동으로 메모리에서 해제한다.&lt;/p&gt;
&lt;p&gt;자바스크립트는 객체 지향 언어다. 넓은 의미에서 이는, 다양한 타입의 값을 다루는 전역 함수를 정의해두기보다, 어떤 값과 작동하는 메서드를 그 값의 타입에 정의해둔다는 말이다. 예를 들어, 배열의 원소들을 정렬할 때는 배열a를 sort() 함수에 인자로 전달하지 않는다. 대신에, a의 sort() 메서드를 호출하여 정렬한다.&lt;/p&gt;
&lt;p&gt;a.sort(); // sort(a)의 객체 지향 버전&lt;/p&gt;
&lt;p&gt;기술적으로, 자바스크립트 객체만이 메서드를 소유한다. 하지만 숫자, 문자열, 불리언 값은 메서드를 가진 것처럼 동작한다. null과 undefined는 자바스크립트에서 유일하게 메서드를 가질 수 없는 값이다.&lt;/p&gt;
&lt;p&gt;자바스크립트의 타이비은 원시 타입과 객체 타입으로 나뉠 수 있다. 메서드를 가진 타입과 그렇지 않은 타입으로도 나뉠 수 있다. 또한 수정 가능한(mutable)타입과 수정할 수 없는(immutable)타입으로도 나뉠 수 있다. 수정 가능한 타입의 값은 바꿀 수 있다. 객체와 배열은 수정 가능한 타입이다. 따라서 자바스크립트 프로그램은 객체 프로퍼티와 배열 원소의 값을 변경할 수 있다. 숫자와 불리언, null, undefined는 수정할 수 없는 타입이다. 예를 들어, 숫자는 그 자체로 값이므로 변경한다는 것 자체가 말이 안 된다. 한편 문자열은 문자들의 배열이니 변경 가능한 타입이라고 생각할지도 모르겠다. 하지만, 자바스크립트에서 문자열은 수정할 수 없는 타입이다. 여러분은 문자열의 인덱스를 이용하여 문자에 접근할 수는 있는지만, 자바스크립트는 문자열의 문자를 바꾸는 어떤 방법도 제공하지 않는다.&lt;/p&gt;
&lt;p&gt;자바스크립트의 값은 타입 변환이 자유롭다. 예를 들어, 프로그램이 문자열을 인자로 받아 처리하는데 여러분이 숫자를 인자로 넘겼다면, 숫자를 자동으로 문자열로 변경할 것이다. 마찬가지로, 불리언 값을 다루는 곳에 불리언 값이 아닌 값을 사용한다면, 자바스크립트는 적절하게 불리언 값으로 변경할 것이다. 자바스크립트의 자유로운 값 변환 규칙은 동일성(equality) 정의에도 영향을 미친다.&lt;/p&gt;
&lt;p&gt;자바스크립트 변수들은 타입이 정해져 있지 않다. 여러분은 변수에 어떤 타입의 값도 할당할 수 있고, 나중에 같은 변수에 다른 타입의 값을 할당할 수 있다. 변수는 var 키워드로 선언한다. 자바스크립트는 어휘 유효범위(scope)를 사용한다. 함수 밖에서 선언된 변수들은 전역 변수고 자바스크립트 프로그램 어디서든 사용할 수 있다. 함수 안에 선언된 변수들은 유효범위가 함수 영역이며, 오직 함수 안에서만 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;3.1 숫자&lt;/p&gt;
&lt;p&gt;다른 프로그래밍 언어들과는 다르게 자바스크립트는 정수 값과 실수 값을 구분하지 않는다. 자바스크립트에서는 모든 숫자를 실수로 표현한다. 프로그램 안에서 있는 그대로 등장하는 숫자를 숫자 리터럴(numberic literal)이라고 한다. 자바스크립트에서는 여러 형태의 숫자 리터럴을 지원하는데, 숫자 리터럴은 첫 번째 숫자 왼편에 뺄셈 기호(-)를 사용하는 방법으로 음수를 표현할 수 있다. 하지만 기술적으로 -는 단항 부정 연산자(unary negation operator)이지 숫자 리터럴의 일부는 아니다.&lt;/p&gt;
&lt;p&gt;3.1.1 정수 리터럴&lt;/p&gt;
&lt;p&gt;자바스크립트에서 10진수 정수는 숫자를 일렬로 나열한 것이다. 예를 들면, 다음과 같다.&lt;/p&gt;
&lt;p&gt;0
3
100000000000&lt;/p&gt;
&lt;p&gt;자바스크립트는 10진수 리터럴 이외에도 16진수 값을 인식한다. 16진수 리터럴은 &apos;0x&apos;나 &apos;0X&apos; 뒤에 16진수 숫자들이 뒤따르는 형태다. 16진수 숫자는 0에서 9까지의 문자와 10부터 15까지를 표현하는 a(혹은 A)부터 f(혹은 F) 까지의 문자 중 하나다. 다음 예제를 통해 16진수 정수 리터럴을 살펴보자.&lt;/p&gt;
&lt;p&gt;0xff // 15*16 + 15 = 255 255 ( base 10) 십진수 255
0xCAFE911&lt;/p&gt;
&lt;p&gt;일부 자바스크립트 구현체에서는 정수 리터럴을 8진수로도 표현할 수 있다. 하지만 ECMAScript 표준에서 8진수 표현을 지원하지는 않는다. 8진수 리터럴은 숫자 0 뒤에 0부터 7 사이의 숫자 시퀸스가 뒤따르는 형태다. 예를 들면 다음과 같다.&lt;/p&gt;
&lt;p&gt;0377 // 3&lt;em&gt;64 + 7&lt;/em&gt;8 + 7 = 255 255 (base 10) 십진수 255&lt;/p&gt;
&lt;p&gt;자바스크립트 구현체에 따라 8진수 리터럴을 지원할 수 있고 하지 않을 수도 있기 떄문에 0으로 시작하는 정수 리터럴은 절대로 사용하지 말아야 한다. 이 경우에, 리터럴이 8진수인지 10진수인지 사용자가 판단하기 힘들기 때문이다. ECMAScripts 5의 엄격 모드 (Strict Mode)에서는 8진수 리터럴을 명시적으로 금지하고 있다.&lt;/p&gt;
&lt;p&gt;3.1.2 부동소수점 리터럴&lt;/p&gt;
&lt;p&gt;부동소수점(floating-point) 리터럴은 소수점을 가질 수 있다. 부동소수점 리터럴은 실수를 표현하는 전통적인 문법을 따른다. 실수는 정수 부분과 소수점, 소수점 이하 부분으로 표현한다.
부동소수점 리터럴은 지수 표기법(exponential notation)으로도 표현할 수 있다. 실수에 이어 문자 e(혹은 E)가 따라나오고, 그뒤에 선택적으로 덧셈 혹은 뺄셈 기호가 나타나고 마지막으로 정수 지수 값이 따라온다. 지수 표기법으로 표현한 값은 실수에 10을 지수 횟수만큼 곱한 값을 나타낸다. 보동소수점 표기법을 더 간결하게 표현하면 다음과 같다 (과연 이게 간결한겨..?..)&lt;/p&gt;
&lt;p&gt;[&apos;&apos;digits&apos;&apos;][.&apos;&apos;digits&apos;&apos;][( E | e ) [(+ | - ) &apos;&apos;digite&apos;&apos;]&lt;/p&gt;
&lt;p&gt;예제는 다음과 같다.&lt;/p&gt;
&lt;p&gt;3.14
2345.789
.3333333333333333
6.02e23 // 6.02 x 10^23 (10의 23승)
1.4738223E-32 // 1.4738223 x 10^-32 ( // 10의 -32승)&lt;/p&gt;
&lt;p&gt;3.1.3 산술 연산&lt;/p&gt;
&lt;p&gt;자바스크립트에서는 언어에서 제공하는 산술 연산자를 사용하여 숫자를 다룬다. 산술 연산자로는 덧셈을 위한 +와 뺄셈을 위한 -, 곱셈을 위한 *, 나눗셈을 위한 /와 나눗셈 연산을 한 후 나머지를 구하는 % 연산자가 있다.
자바스크립트는 기본적인 산술 연산뿐 아니라, 더 복잡한 수치 연산을 Math 객체를 통해 지원한다. Math 객체에는, 수치 연산에 쓰이는 다양한 함수와 상수들이 프로퍼티 형태로 정의되어 있다. 아래의 예제를 보자.&lt;/p&gt;
&lt;p&gt;Math.pow(2,53) // =&gt; 9007199254740992: 2의 53승
Math.round(.6) // =&gt; 1.0: 반올림
Math.ceil(.6) // =&gt; 1.0: 올림
Math.floor(.6) // =&gt; 0.0: 내림
Math.abs(-5) // =&gt; 5: 절대 값
Math.max(x,y,z) // =&gt; 가장 큰 인자를 반환한다.
Math.min(x,y,z) // =&gt; 가장 작은 인자를 반환한다.
Math.random() // =&gt; 0과 1.0 사이에 임의의 수 x를 반환한다.
Math.PI // n: 원주율
Math.E // e: 자연 로그 상수
Math.sqrt(3) // 3의 제곱근
Math.pow(3, 3) // 3의 세제곱
Math.sin(0) // 삼각함수(Math.cos, Math.atan 등)
Math.log(10) // 자연 로그 10
Math.log(100) /Math.LN10 // 밑이 10인 로그 100
Math.log(512)/Math.LN2 // 밑이 2인 로그 512
Math.exp(3) // Math.E의 3 거듭제곱&lt;/p&gt;
&lt;p&gt;자바스크립트가 지원하는 모든 수리 함수에 대한 자세한 설명은 레퍼런스의 Math 객체 부분을 참고
자바스크립트의 산술 연산은 오버플로와 언더플로, 0으로 나누는 에러를 발생시키지 않는다. 산술 연산의 결과가 표현할 수 있는 가장 큰 수보다 더 크다면 (오버플로overflow), 자바스크립트는 Infinity라고 표현하는 무한대의 값을 출력한다. 비슷하게, 표현 가능한 가장 작은 음수 값보다 더 작은 값은 음의 무한대가 되면 자바스크트는 이 값을 -Infinity로 출력한다.&lt;/p&gt;
&lt;p&gt;언더플로(underflow)는 산술 연산의 결과가 표현할 수 있는 가장 작은 값보다 더 0에 가까울 때 발생한다. 이런 경우에 자바스크립트는 0을 돌려준다. 만약 언더플로가 음수에서 발생했다면 자바스크립트는 특수 값인 &apos;음의 0&apos;을 반환한다. 자바스크립트에서 0으로 나누는 연산은 에러가 아니다. 이런 경우에 무한대 또는 음의 무한대가 반환된다. 그런데 여기에는 한 가지 예외가 있다. 0을 0으로 나누는 것은 정의되지 않은 값을 갖고, 그 결과로 숫자가 아닌 특수한 값을 가진다. 자바스크립트에서는 이러한 값을 NaN으로 출력한다. 또한, NaN은 무한대를 무한대로 나누는 경우와 음수 값에 루트를 씌우는경우, 숫자가 아닌 피연산자로 산술 연산을 시도하는 경우에도 발생한다.&lt;/p&gt;
&lt;p&gt;자바스크립트는 양의 무한대와 숫자가 아닌 값을 표현하기 위해 전역 변수 Infinity, NaN을 미리 정의한다. ECMAScript 3에서 Infinity와 NaN은 읽고 쓰기가 가능한 값이고 값이 변할 수도 있지만, ECMAScript 5에서는 Infinity와 NaN을 읽기 전용 값으로 정의한다. Number 객체에는 Infinity와 NaN이 따로 상수로 정의되어 있으며, 이들 상수는 ECMAScript 3에서도 읽기 전용이다. 다음 예제를 통해 살펴보자.&lt;/p&gt;
&lt;p&gt;Infinity // 읽고 쓰기 가능한 변수로 INfinity로 초기화된다.
Number.POSITIVE&lt;em&gt;INFINITY // Infinity와 같은 값이지만 읽기 전용이다.
1/0 // Infinity와 같은 값이다.
Number.MAX&lt;/em&gt;VALUE + 1 // 역시 Infinity로 평가된다.
Number.NEGATIVE&lt;em&gt;INFINITY // 이 표현은 음의 무한대다.
-Infinity
-1/0
-Number.MAX&lt;/em&gt;VALUE - 1
NaN // 읽고 쓰기 가능한 변수로 NaN으로 초기화된다.
Number.NaN // NaN과 같은 값을 갖지만 읽기 전용 프로퍼티다.
0/0 // NaN으로 평가한다.
Number.MIN&lt;em&gt;VALUE/2 // 언더플로: 0으로 간주한다.
-Number.MIN&lt;/em&gt;VALUE/2 // 음의 0으로 간주한다.
-1/Infinity // 이것 또한 음의 0으로 간주한다.
-0&lt;/p&gt;
&lt;p&gt;자바스크립트에서 NaN은 한 가지 독특한 기능을 가지고 있다. NaN은 그 자신뿐만 아니라 다른 값과 같은지 비교할 수 없다. 다시 말해, 변수 x가 NaN인지 판단하기 위해 x == NaN 문을 작성할 수 없다. 대신에 x != x 라고 작성해야 한다. x가 NaN이라면 이 표현식은 참일 것이다. isNaN() 함수는 이러한 경우에 유용하게 사용할 수 있다. 이 함수는 인자가 NaN이거나, 문자열이나 객체처럼 숫자가 아니라면 참을 반환한다. 이와 유사한 함수 isFinite() 는 인자가 NaN, Infinity 또는 -Infinity 이외의 숫자라면 참을 반환한다.&lt;/p&gt;
&lt;p&gt;음의 0도 좀 특이하다. 음의 0은 양의 0과 같은지 (자바스크립트의 엄격한 동치 테스트를 사용하여) 비교할 수 있는데, 나눗셈을 할 때를 제외하고는 거의 같다.&lt;/p&gt;
&lt;p&gt;var zero = 0; // 일반적인 0
var negz = -0; // 음의 0
zero === negz // =&gt; true: 0과 음의 0은 같다.
1/zero === 1/negz // =&gt; false: 무한대와 음의 무한대는 같지 않다.&lt;/p&gt;
&lt;p&gt;3.1.4 이진 부동소수점과 반올림 오류&lt;/p&gt;
&lt;p&gt;무한히 많은 실수가 있지만 자바스크립트에서는 한정된 숫자만 부동소수점 형태로 표현할 수 있다. 자바스크립트에서 실수 연산을 할 때는 근사 값으로 표현한다.
자바스크립트(뿐만 아니라 다른 현대적인 프로그래밍 언어)에서 사용하는 IEEE-754 부동소수점 표현 방식은 1/2, 1/8 1/1024 같은 분수를 정확하게 표현할 수 있는 이진 표현법(binary representation)이다. 하지만 가장 많이 사용하는(특히 간단한 계산을 할 때 주로 사용하는) 분수는 10진수 분수로 1/10, 1/100등인데, 이진 표현법으로는 0.1과 같은 간단한 값도 정확하게 표현할 수 없다.&lt;/p&gt;
&lt;p&gt;자바스크립트에서 숫자는 높은 정밀도를 가지고 있어서 0.1에 근접한 근사치를 낼 수 있지만, 정확하게 표현할 수 없다는 점은 문제를 야기할 수 있다. 다음 코드를 살펴보자.&lt;/p&gt;
&lt;p&gt;var x = .3 - .2; // 0.3 - 0.2
var y = .2 - .1; // 0.2 - 0.1
x == y // =&gt; false: 두 값은 같지 않다.
x == .1 // =&gt; false: 0.3 - 0.2는 0.1이 아니다.
y == .1 // =&gt; true: 0.2 - 0.1은 0.1과 같다.&lt;/p&gt;
&lt;p&gt;반올림 오류 때문에, .3 근사치와 .2 근사치의 차는 .2와 .1의 근사치 사이의 차이와 같지 않다. 이는 자바스크립트가 가진 결함이 아니라 이진 부동소수점 숫자를 사용하기 때문에 벌어지는 현상이며, 이진 부동소수점 숫자를 사용하는 프로그래밍 언어에서 볼 수 있는 공통적인 현상이다. 또한 코드의 x와 y 값은 서로 매우 근접하고 정답 (0.1)에 가까운 값이다. 계산된 값은 대부분 적절하지만, 값들을 동등 비교할 경우에는 문제가 발생한다. 자바스크립트의 다음 버전은 이런 반올림 문제를 피하는 십진수 타입을 지원 할 것이다. 하지만 그때까지 민감한 금융 계산에는 환산된 정수 값을 이용해야 할 수도 있다. 소수점이 포함된 달러($) 대신 정수 값인 센트로 화폐 단위를 변경하는 경우처럼 말이다.&lt;/p&gt;
&lt;p&gt;3,1,5 날짜와 시간&lt;/p&gt;
&lt;p&gt;코어 자바스크립트는 날짜와 시간을 표현하는 객체를 생성하는 Date() 생성자를 제공한다. Date 객체는 간단한 날짜 계산을 하는 메서드를 가지고 있다. Date 객체는 숫자 같은 원시 타입이 아니다.&lt;/p&gt;
&lt;p&gt;var then = new Date(2010, 0, 1); // 2010년 1월 1일
var later = new Date(2010, 0, 1, 17, 10, 30); // 2010년 1월 1일, 오후 5시 10분 30초&lt;/p&gt;
&lt;p&gt;var now = new Date(); // 현재 날짜와 시간
var elapsed = now - then; // 밀리초로 날짜 계산&lt;/p&gt;
&lt;p&gt;later.getFullYear() // 2010
later.getMonth() // 0: 월은 0부터 시작한다.
later.getDate() // 1: 일은 1로 시작한다.
later.getDay() // 5: 요일. 0은 일요일, 5는 금요일
later.getHours() // 17: 오후 5시
later.getUTCHours() // 시간대에 의존한 UTC 시간
later.toString() //
later.toUTCString() //
later.toLocaleDateString() //
later.toLocaleTimeString() //
later.toISOString() // ECMAScript 5에서만 지원한다.&lt;/p&gt;
&lt;p&gt;3.2 텍스트&lt;/p&gt;
&lt;p&gt;문자열(string)은 16비트 값들이 연속적으로 나열된 변경이 불가능한 값으로, 각 문자는 유니코드 문자로 표현된다.(string은 텍스트를 표현하는 자바스크립트 타입이다). 문자열의 길이 값은 문자열에 들어 있는 16비트 값의 개수다. 자바스크립트에서 문자열(그리고 배열)은 0 기반의 인덱싱을 사용한다. 따라서 첫 번째 16비트 값은 인덱스 0번째에 위치하고, 두 번째는 인덱스 1번째에 위치한다. 빈 문자열은 길이 값이 0이다. 자바스크립트에는 문자 하나를 표현하는 타입이 없다. 그러므로 하나의 16비트 값을 표현하기 위해서는 길이가 1인 문자열을 사용하면 된다.&lt;/p&gt;
&lt;p&gt;3.2.1 문자열 리터럴&lt;/p&gt;
&lt;p&gt;자바스크립트 프로그램에서 문자열 그대로를 포함하려면 단순히 문자열을 작은 따옴표 혹은 큰따옴표(&apos; 또는 &quot; )로 둘러싸면 된다. 큰따옴표는 작은따옴표로 둘러싸인 문자열에 포함될 수 있고 작은따옴표 역시 큰따옴표로 싸여있는 문자열안에 포함될 수 있다. 예제를 통해, 문자열 리터럴을 살펴보자.&lt;/p&gt;
&lt;p&gt;&quot;&quot; // 빈 문자열 : 문자가 없다.
&apos;testing&apos;
&quot;3.14&quot;
&apos;name=&quot;myform&quot;&apos;
&quot;0&apos;reilly의 책을 더 좋아하지 않습니까?&quot;
&quot;이 문자열은 \n 두 줄이다.&quot;
&quot;n는 원지름에 대한 둘레의 비율이다.&quot;&lt;/p&gt;
&lt;p&gt;ECMAScript 5에서는 줄 끝에 역슬래시()를 놓으면 한 줄ㅇ르 여러 줄로 작성할 수 있다. 역슬래시와 그 뒤에 오는 줄 종료자(line terminator)는 문자열 리터럴의 일부가 아니다. 문자열 리터럴에 줄바꿈 문자를 포함시켜야 한다면, 문자 시퀸스 \n을 사용하라.&lt;/p&gt;
&lt;p&gt;&quot;two \nlines&quot; // 한 줄이 두 줄로 표현되는 한 문자열
&quot;one\ // 세 줄로 표현된 한 줄 문자열. ECMASCript 5에서만 가능.
long&lt;br&gt;
line&quot;&lt;/p&gt;
&lt;p&gt;문자열을 구분하는 작은 따옴표를 사용할 때는 영어에서 can&apos;t와 O&apos;Reilly&apos;s 같은 단축형 표현과 소유형 단어에 주의해야 한다. 아포스트로피(&apos;)가 작은따옴표와 같기 때문에, 작은따옴표로 감싸진 문자열에서 아포스트로피를 &apos;이스케이프(Escape)&apos;시키기 위해서 역슬래시()를 사용해야 한다.&lt;/p&gt;
&lt;p&gt;클리어언트 측 자바스크립트 프로그래밍에서 자바스크립트 코드는 HTML 코드를 포함할 수 있고, HTML 코드도 자바스크립트 코드를 ㅗ함할 수 있다. 자바스크립트처럼 HTML은 문자열을 구분하기 위해 작은따옴표 혹은 큰따옴표를 사용한다. 따라서 자바스크립트와 HTML을 섞어서 사용할 때는 자바스크립트 코드에서 작은따옴표나 큰따옴표 중 하나를 사용하고 HTML 코드에서 나머지 하나를 사용하는 것이 좋다. 다음 예에서 &quot;Thank you&quot;는 자바스크립트 표현식 내에서 작은따옴표로 둘러싸여 있고 이것은 다시 HTML 이벤트 처리기 어트리뷰트 내에서 큰따옴표로 둘러싸여 있다.&lt;/p&gt;
&lt;p&gt;&lt;button onclick=&quot;alert(&apos;Thank you&apos;)&quot;&gt;Click Me&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;3.2.2 문자열 리터럴 내의 이스케이프 문자열&lt;/p&gt;
&lt;p&gt;역슬래시 문자()는 자바스크립트 문자열에서 특별한 목적을 위해 사용한다. 역슬래시 문자는 뒤따라 나오는 문자와 결합될 경우 다른 방식으로는 표현할 수 없는 문자를 표현한다. 예를 들어, \n은 줄바꿈 문자를 나타내는 이스케이프 시퀸스다.&lt;/p&gt;
&lt;p&gt;또 다른 예로, 앞에서 언급했던 &apos; 이스케이프 시퀸스가 있다. &apos; 이스케이프 시퀸스는 작은따옴표로 둘러싸인 문자열 리터럴 내에 작은 따옴표 문자를 포함시켜야 할 때 유용하게 사용할 수 있다. 이제 이러한 표현을 이스케이프 시퀸스로 부르는 이유를 알 수 있을 것이다. 역슬래시는 작은따옴표문자를 일반적인 해석 방식에서 벗어나 특수한 방식으로 해석하게 만든다. 다음과 같이 역슬래시를 사용하면 작은따옴표가 문자열의 끝을 나타내는 것이 아니라 영어 단축형 문자를 나타나게 할 수 있다.&lt;/p&gt;
&lt;p&gt;&apos;You&apos;re reght, it can&apos;t be a quote&apos;&lt;/p&gt;
&lt;p&gt;3.2.3 문자열 다루기
자바스크립트가 지원하는 기본 기능 중 하나는 여러 문자열을 이어붙이는 것이다. 숫자에 + 연산자를 적용하면 숫자들이 더해진다. 하지만 문자열에 적용하면 두 번째 문자열을 첫 번째 문자열에 이어 붙인다. 예를 들면, 다음과 같다.&lt;/p&gt;
&lt;p&gt;msg = &quot;Hello, &quot; + &quot;world&quot;; // 문자열을 합친다. &quot;Hello world&quot;
greeting = &quot;Welcome to my blog,&quot; + &quot; &quot; + name;&lt;/p&gt;
&lt;p&gt;문자열의 길이를 알고 싶다면 length 프로퍼티를 사용하라. 문자열 s의 길이를 알고 싶다면 다음과 같이 한다.&lt;/p&gt;
&lt;p&gt;s.length&lt;/p&gt;
&lt;p&gt;length 프로퍼티 이외에도 문자열을 다루는 다양한 메서드가 있다(보다 자세한 사항은 레퍼런스 부분을 참고하기 바란다).&lt;/p&gt;
&lt;p&gt;var s = &quot;hello, world&quot; // &apos;hello world&apos; 를 사용한다
s.charAt(0) // =&gt; &quot;h&quot;: 첫 번째 문자
s.charAt(s.length-1) // =&gt; &quot;d&quot;: 마지막 문자
s.substring(1,4) // =&gt; &quot;ell&quot;: 두 번째, 세번째, 네 번째 문자
s.slice(1,4) // =&gt; &quot;ell&quot;: 두 번째, 세번째, 네 번째 문자
s.slice(-3) // =&gt; &quot;rld&quot;: 마지막 세 문자
s.indexOf(&quot;l&quot;) // =&gt; 2: 문자 l이 위치한 첫 번째 위치
s.lastIndexOf(&quot;l&quot;) // =&gt; 10: 문자 l이 위치한 마지막 위치
s.indexOf(&quot;l&quot;, 3) // =&gt; 3: 세 번째 문자 이후, 문자 &quot;l&quot;이 등장하는 첫위치
s.split(&quot;, &quot;) // =&gt;[&quot;Hello, world&quot;]: 부분 문자열로 나눈다.
s.replace(&quot;h&quot;, &quot;H&quot;) // =&gt; &quot;Hello, world&quot; : 문자열에서 h를 H로 바꾼다.
s.toUpperCase() // =&gt; &quot;HELLO, WORLD&quot;&lt;/p&gt;
&lt;p&gt;자바스크립트에서 문자열은 변경되지 않는다. replace()와 toUpperCase() 같은 메서드는 기존 문자열을 변경하지 않고 새 문자열을 반환한다. 즉, 문자열 관련 메서드는 호출 시에 기존 문자열을 수정하지 않는다.
ECMAScript 5에서 문자열은 읽기 전용 배열처럼 취급될 수 있고, 대괄호 대신 charAt() 메서드를 사용해도 문자열의 개별 문자(16비트 값)에 접근할 수 있다.&lt;/p&gt;
&lt;p&gt;s = &quot;hello, world&quot;;
s[0] // =&gt; &quot;h&quot;
s[s.length-1] // =&gt; &quot;d&quot;&lt;/p&gt;
&lt;p&gt;파이어폭스를 비롯한 모질라 기반의 웹브라우저는 오랫동안 이런 방식으로 문자열에 접근할 수 있었다. ECMAScript 5에서 표준화가 되기 전에도 대부분의 최신 브라우저(IE를 제외한 브라우저)들이 모질라의 방식을 따르고 있었다.&lt;/p&gt;
&lt;p&gt;3.2.4 패턴 매칭&lt;/p&gt;
&lt;p&gt;자바스크립트는 문자 패턴을 나타내는 객체를 생성하기 위해 RegExp() 생성자를 정의한다. 이 패턴은 정규 표현식이라 부르며, 자바스크립트는 정규 표현식을 위해 펄(Perl)의 구문을 따른다. 문자열과 RegExp 객체는 모두 패턴 매칭과 &apos;검색 후 바꾸기&apos; 기능을 수행하는 메서드를 가지고 있다.&lt;/p&gt;
&lt;p&gt;RegExp는 자바스크립트의 원시 타입이 아니다. Date 객체처럼 RegExp는 유용한 API를 가지고 있는 특별한 종류의 객체다. 정규 표현식 문법은 복잡하고, API 또한 명확하지 않다. 하지만 RegExp는 문자를 다루는 강력한 수단을 제공할 뿐 아니라 일반적으로 사용되기 때문에, 이번 절에서 간단히 개요를 살펴보기로 하자.&lt;/p&gt;
&lt;p&gt;RegExp가 자바스크립트의 기본 데이터 타입은 아니지만, 자바스크립트는 정규식에 대한 리터럴 문법을 가지고 있고(또는 지원하고) 이는 자바스크립트 프로그램으로 바로 해석될 수 있다. 한 쌍의 슬래시 사이에 있는 문자열은 정규 표현식 리터럴을 구성한다. 한 쌍의 슬래시 중 두 번째 슬래시 뒤에는 하나 혹은 그 이상의 문자가 뒤따라 올 수 있는데, 이것은 패턴의 의미를 수정할 수 있다. 예를 들면, 다음과 같다.&lt;/p&gt;
&lt;p&gt;/^HTML/ // HTML로 시작하는 문자열
/[1-9] [0-9]*/ // 0 아닌 숫자로 시작하는 문자
/\bjavascript\b/i // 대소문자 구별 없이 javascript와 일치하는 문자열&lt;/p&gt;
&lt;p&gt;RegExp 객체에는 유용한 메서드들이 정의되어 있다. 또한 문자열은 RegExp 객체를 인자로 갖는 메서드들을 가지고 있다. 예를 들면, 다음과 같다.&lt;/p&gt;
&lt;p&gt;var text = &quot;testing: 1, 2, 3&quot;; // 간단한 문자열
var pattern = /\d+/g // 하나 이상의 모든 숫자와 일치
pattern.test(text) // =&gt; true: 일치하는 문자열이 존재
text.search(pattern) // =&gt; 9: 첫 번째로 매치하는 문자열의 위치
text.match(pattern) // =&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]: 일치된 항목의 배열
text.replace(pattern, &quot;#&quot;); // =&gt; &quot;testing: #, #, #&quot;
text.split(/\D+/); // =&gt; [&quot;&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;]: 숫자가 아닌 문자(열)를 기준으로
분할&lt;/p&gt;
&lt;p&gt;3.3 불리언 값&lt;/p&gt;
&lt;p&gt;불리언(Boolean) 값은 참/거짓, on/off, yes/no를 표현한다. 불리언 값이 될 수 있는 표현식은 항상 예약어인 true와 false 중 하나의 값으로 평가된다. 일반적으로 불리언 값은 자바스크립트 프로그램에서 비교의 결과로 생성된다. 예를 들면, 다음과 같다&lt;/p&gt;
&lt;p&gt;a == 4&lt;/p&gt;
&lt;p&gt;이 코드는 변수 a의 값이 숫자 4와 같은지 검사한다. 만약 같다면 이 비교 결과는 불리언 값 true가 된다. a가 4와 같지 않다면 비교 결과는 false가 된다.
일반적으로 불리언 값은 자바스크립트 제어 구조 내에서 사용된다. 예를 들어, 자바스크립트에서 if/else문은 불리언 값이 true 일 경우 한 가지 동작을 수행하고 false일 경우 나머지 동작을 수행한다. 대개 불리언 값을 반환하는 비교문과 이 비교문을 사용하는 문장을 결합해서 사용한다. 그 결과는 다음과 같다.&lt;/p&gt;
&lt;p&gt;if ( a == 4)
b = b + 1;
else
a = a + 1;&lt;/p&gt;
&lt;p&gt;이 코드는 a가 4와 같은지를 검사한다. 만약 그렇다면 b에 1을 더하고 아니라면 a에 1을 더한다. 3.8절에서는 어떤 자바스크립트 값이든 불리언 값으로 변환될수 있음에 대해 설명할 것이다. 다음은 모두 불리언 false 값으로 변한다.&lt;/p&gt;
&lt;p&gt;undefined
null
0
-0
NaN
&quot;&quot; // 빈 문자열&lt;/p&gt;
&lt;p&gt;객체(와 배열)를 포함하는 다른 모든 값은 불리언 값 true로 변환되고, true처럼 동작한다. false와 false로 변환되는 앞의 여섯 값들은 때때로 거짓으로 판정되는 (falsy) 값이라고 불리고, 그 밖의 모든 값들은 참으로 판정되는(truthy) 값이 라고 불린다. 자바스크립트는 언제든지 거짓으로 판정되는 값이 false로, 참으로 판정되는 값이 true로 동작할 거라고 기대한다.
예를 들어, 변수 o가 객체 또는 null 값을 갖고 있다고 가정하자. 다음과 같은 구문을 사용하면 o가 null이 아닌지 여부를 명확히 테스트할 수 있다.&lt;/p&gt;
&lt;p&gt;if ( o ! == null) …&lt;/p&gt;
&lt;p&gt;불일치 연산자 !==는 o와 null을 비교하고 true인지 false인지 평가한다. 하지만 다음 코드와 같이 비교를 생략하는 대신 null이 거짓으로 판정되는 값이고 객체가 참으로 판정되는 값이라는 점을 이용할 수 있다.&lt;/p&gt;
&lt;p&gt;if (o) …&lt;/p&gt;
&lt;p&gt;첫 번째 케이스 if문의 몸체는 o가 null이 아닐 때 실행될 것이다. 두 번째 케이스는 덜 엄격하다. o가 false 혹은 거짓 값(null 이나 undefined)이 아니라면 if의 몸체가 실행될 것이다. 프로그램 내에서 if문이 적절한지는 여러분이 o에 어떤 값이 할당되기를 기대하는지에 달렸다. o과 &quot;&quot;가 null과 다른지 구별할 필요가 있다면 명확한 비교를 사용해야 한다.&lt;/p&gt;
&lt;p&gt;불리언 값은 문자열 &quot;true&quot; 혹은 &quot;false&quot;로 변환할 수 있는 toString() 메서드를 가지고 있지만 그 밖의 메서드는 가지고 있지 않다. 비록 API는 단순하지만, 불리언 값에 사용되는 세 가지 중요한 연산자가 있다.
&amp;#x26;&amp;#x26; 연산자는 불리언 AND 연산을 수행한다. &amp;#x26;&amp;#x26;는 두 피 연산자가 참일 때 참으로 평가하고 그렇지 않다면 거짓으로 평가한다. || 연산자는 불리언 OR 연산자이다. ||는 두 피연산자 중 하나라도 참이라면 참으로 평가하고, 두 피연산자 모두 거짓이라면 거짓으로 평가한다. 마지막으로 단항 ! 연산자는 불리언 NOT 연산을 수행한다. !는 피연산자가 거짓이면 참으로, 피연산자가 참이면 거짓으로 평가한다. 예를 들면, 다음과 같다.&lt;/p&gt;
&lt;p&gt;if (( x == 0 &amp;#x26;&amp;#x26; y == 0 ) || ! ( z == 0 )) {
// x와 y는 둘 다 0이거나 z가 0이 아니다
}&lt;/p&gt;
&lt;p&gt;3.4 null과 undefined&lt;/p&gt;
&lt;p&gt;null은 보통 아무 값도 갖지 않음을 가리킬 때 사용되며, 특별한 값을 평가하는 키워드다. typeof 연산자를 null에 사용하면 문자열 &quot;object&quot;를 반환한다. 그 결과로 볼 때, null은 &apos;객체가 없음&apos;을 뜻하는 특수한 객체 값으로 생각할 수 있다. 하지만 실무에서 null은, 값이 null 하나뿐인 어떤 고유한 자료형에 속한 것으로 간주되며, 객체뿐 아니라 수나 문자열 &quot;값이 없음&quot;을 나타내는 데도 쓰인다. 대다수 프로그래밍 언어는 자바스크립트의 null과 동등한 값을 가지고 있으며, 보통 null이나 nil이라고 표기한다.&lt;/p&gt;
&lt;p&gt;자바스크립트에는 값이 없음을 나타내는 또 다른 값, undefined가 있다. undefined는 null보다도 심한 부재 상태를 나타낸다. undefined는 초기화되어 있지 않은 변수나, 존재하지 않는 객체 프로퍼티나 배열의 원소 값에 접근하려고 할 때 얻는 값이다. 또한 undefined는 반환값이 없는 함수의 반환값이고, 실 인자가 전달되지 않는 형식인자의 값이다. undefined는 미리 선언된 전역 변수(null처럼 언어 차원의 키워드가 아닌)이며, 정의되지 않은 값(undefined value)으로 초기화된다. ECMAScript3 에서 undefined는 읽고 쓸 수 있는 변수이므로 다른 값으로 설정될 수 있었다. 이러한 문제점은 ECMAScrpit 5에서 수정되었고, undefined는 읽기 전용이 되었다.&lt;/p&gt;
&lt;p&gt;typeof 연산자를 undefined 값에 사용한다면 &quot;undefined&quot;가 반환된다. 이는 undefined가 특별한 고유의 값임을 말한다. 이런 차이에도 불구하고 null과 undefined는 둘 다 값이 없음을 가리키고, 사용할 때 서로 바꿔 사용할 수도 있다. 동치 연산자 ==를 null과 undefined에 사용하면 두 값이 같다고 간주한다(null과 undefined)를 구별하기 위해서는 엄격한 동치 연산자 ===를 사용하라). null과 undefined는 둘 다 false로 판정되는 값이며 불리언 값 false로 변환된다. null과 undefined는 프로퍼티와 메서드를 가지고 있지 않기 때문에, 실제로 프로퍼티 혹은 메서드에 접근하기 위해 . 연산자나 [] 를 사용하면 TypeError가 발생한다.&lt;/p&gt;
&lt;p&gt;시스템 수준에서 예기치 않은 상황에 발생한, 오류성 값 부재를 표현할 때는 주로 undefined를 사용하고, 일반적인 프로그램 수준에서 일반적으로, 또는 예상 가능한 값 부재 상황을 표현하고 싶을 때는 null을 사용한다. 만약 이들 값 중 하나를 변수나 프로퍼티에 할당할 필요가 있거나 함수에 인자로 전달할 필요가 있다면, undefined보다는 null을 사용하는 게 적절하다.&lt;/p&gt;
&lt;p&gt;3.5 전역 객체&lt;/p&gt;
&lt;p&gt;지금까지 자바스크립트의 기본적인 데이터 타입과 값을 설명했다. 반드시 살펴봐야 할 중요한 객체가 있는데, 이는 전역 객체다. 전역 객체(global object)는 매우 중요한 용도로 사용되는 일반적인 자바스크립트 객체다. 전역 객체의 프로퍼티는 자바스크립트 프로그램 전역에서 사용할 수 있게 정의된 심벌이다. 자바스크립트 인터프리터가 시작할 때(혹은 웹브라우저가 새로운 페이지를 불러올 때), 새로운 전역 객체를 만들고 그 프로퍼티들을 초기화한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;• undefined, Infinity, NaN 같은 전역 프로퍼티
• isNaN(), parseInt(), eval() 같은 전역 함수들
• Date(), RegExp(), String(), object(), Array() 같은 생성자 함수
• Math와 JSON 같은 전역 객체&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;전역 객체가 생성될 때 초기화되는 프로퍼티들(undefined, Infinity, NaN 등)은 예약어가 아니지만 예약어처럼 취급된다. 이번 장에서도 몇 가지 전역 객체들을 살펴봤다. 이 외의 프로퍼티들은 이 책의 뒷부분에서 살펴보기 바란다. 필요에 따라 코어 자바스크립트 레퍼런스에서 해당 프로퍼티 이름으로 필요한 내용을 참고할 수 있다. 전역 객체는 레퍼런스에서 &apos;Global&apos; 부분을 살펴보면 되겠다. Window객체가 정의하는 클라이언트측 전역 프로퍼티들은 클라이언트 측 레퍼런스에서 찾아볼 수 있다.
최상위 코드(함수의 일부가 아닌 코드)에서는 this 키워드를 통해 전역 객체를 참조할 수 있다.&lt;/p&gt;
&lt;p&gt;var global = this; // 전역 객체를 참조하는 변수를 정의한다.&lt;/p&gt;
&lt;p&gt;클라이언트 측 자바스크립트에서 Window 객체는 브라우저 창에 포함된 모든 자바스크립트 코드를 위한 전역 객체다. 이 전역 Window 객체는 자기 자신을 참조하는 window 프로퍼티를 갖고 있는데, 전역 객체를 참조할 때 this 대신 사용할 수 있다. Window 객체는 핵심적인 전역 프로퍼티티들을 정의할 뿐만 아니라, 웹브라우저와 클라이언트 측 자바스크립트에서 사용되는 몇 가지 전역 객체들도 정의하고 있다.
최초 전역 객체가 생성될 때, 그 안에는 자바스크립트에서 사용하는 모든 전역 값이 정의된다. 하지만 이 전역 객체는 프로그램별 전역 객체도 갖게 된다. 만약 여러분이 전역 변수를 선언한다면, 이 변수는 전역 객체의 프로퍼티가 되는 것이다.&lt;/p&gt;
&lt;p&gt;3.6 래퍼(wrapper) 객체&lt;/p&gt;
&lt;p&gt;자바스크립트 객체는 복합적인(composite) 값이다. 객체는 프로퍼티 또는 이름 있는 값들의 집합이며, .표기법을 사용하여 프로퍼티의 값을 참조한다. 프로퍼티의 값이 함수일 때, 그 함수를 메서드라 부른다. 객체 o의 메서드 m을 호출하려면 o.m() 이라고 적는다. 다음과 같이, 문자열에도 프로퍼티와 메서드가 있음을 살펴봤었다.&lt;/p&gt;
&lt;p&gt;var s = &quot;hello world!&quot;; // 문자열
var word = s.substring(s.indexOf(&quot; &quot;)+1, s.length); // 문자열 프로퍼티 사용&lt;/p&gt;
&lt;p&gt;왜 문자열은 객체도 아닌데 프로퍼티를 가지고 있을까? 여러분이 문자열 s의 프로퍼티를 참조하려고 할 때, 자바스크립트는 new String(s)를 호출한 것처럼 문자열 값을 객체로 변환한다. 이 객체는 문자열 메서드를 상속하며, 프로퍼티 참조를 살펴보는 데 사용된다. 일단 프로퍼티 참조가 해제되면 새로 생성된 임시 객체는 메모리에서 회수된다. (자바스크립트 인터프리터는 실제로는 임시 객체를 생성하고 삭제할 필요는 없으나, 그런 것처럼 동작하긴 해야 한다).&lt;/p&gt;
&lt;p&gt;숫자와 불리언은 문자열과 같은 이유로 메서드를 가지고 있다. 임시 객체는 Number() 혹은 Boolean() 생성자를 통해 만들어지고, 메서드는 임시 객체를 통해 호출된다. null과 undefined 값의 래퍼 객체는 없다. null과 undefined의 프로퍼티에 접근하려고 하면 TypeError가 발생한다. 다음 예제를 살펴보고, 실행되었을때 어떤 일이 발생할지 생각해보자.&lt;/p&gt;
&lt;p&gt;var s = &quot;test&quot;; // 이 문자열을 사용한다.
s.len = 4; // 문자열 프로퍼티에 값을 할당한다.
var t = s.len; // 프로퍼티를 참조하라.&lt;/p&gt;
&lt;p&gt;이 코드를 실행해 보면 t의 값은 undefined이다. 2행은 생성된 임시 String 객체 의 len 프로퍼티에 4를 할당한다. 그리고 임시 객체는 바로 삭제된다. 3행은 기존 문자열 값과 같은 값을 가진 새로운 String 객체를 생성하고 len 프로퍼티를 읽으려고 한다. 이 프로퍼티는 존재하지 않아서 undefined로 평가된다. 이 코드는 여러분이 문자열이나 숫자, 불리언 값에서 프로퍼티(혹은 메서드)의 값을 읽으려고 할 때, 문자열, 숫자, 불리언 값이 객체처럼 동작하는 것을 보여준다. 하지만 프로퍼티에 어떤 값을 할당한다면, 무시될 것이다. 값을 할당하는 것은 임시 객체에서 수행되며, 지속되지 않는다.&lt;/p&gt;
&lt;p&gt;문자열, 숫자, 불리언의 프로퍼티에 접근하려고 할 때 생성되는 임시 객체는 래퍼(wrapper) 객체로 알려져 있다. 때로, 문자열이나 수 또는 불리언 값과 String 또는 Number, Boolean 객체를 구별해야 할 일이 생길 수도 있을 것이다. 하지만 일반적으로 래퍼 객체는 자바스크립트 엔진에 따라 구현이 다를 수 있으므로, 여러분은 이에 대해 생각할 필요가 없다. 대신 문자열과 숫자, 불리언 값의 프로퍼티가 읽기 전용이고, 이 값들에 새로운 프로퍼티를 정의할 수 없다는 점에서 이 값들이 객체와 다르다는 사실을 알아야 한다.&lt;/p&gt;
&lt;p&gt;String() 과 Number(), Boolean() 생성자를 사용해 명시적으로 (하지만 거의 불필요하거나 유용하지 않은) 래퍼 객체를 생성할 수 있다는 사실도 명심하라.&lt;/p&gt;
&lt;p&gt;var s = &quot;test&quot;, n = 1, b = true; // 문자열, 숫자, 불리언 값
var S = new String(s); // String 객체&lt;br&gt;
var N = new Number(n); // Number 객체
var B = new Boolean(b); // Boolean 객체&lt;/p&gt;
&lt;p&gt;자바스크립트는 래퍼 객체를 필요에 따라 기본 타입으로 변환한다. 그래서 보통 앞선 코드의 객체 S, N, B는 항상 값 s, n, b처럼 작동한다. ==동치 연산자는 값과 그 값의 래퍼 객체를 동등하게 다룬다. 하지만 === 엄격한 동치 연산자로 이것들을 구별할 수 있다. typeof 연산자는 여러분에게 기본 타입과 래퍼 객체의 차이점을 보여줄 것이다.&lt;/p&gt;
&lt;p&gt;3.7 변경 불가능한 원시 타입 값과 변경 가능 객체 참조&lt;/p&gt;
&lt;p&gt;자바스크립트에서 원시 타입(undefined, null, 불리언, 숫자, 문자열) 값과 객체 ( 배열과 함수를 포함한) 사이에는 근본적인 차이점이 있다. 바로 원시 타입의 값은 수정할 수 없다는 점이다. 숫자와 불리언의 경우는 매우 명확하다. 수의 값을 바꾸면, 그것은 다른 수가 되기 때문이다. 하지만 문자열의 경우는 조금 다르다. 문자열은 문자들의 배열과 같기 떄문에, 특정 배열의 원소를 변경할 수 있다고 생각할지 모른다. 하지만 자바스크립트에서는 실제로 문자열의 각 문자를 변경 할 수 없다. 문자열을 수정하는 모든 문자열 메서드는 새로운 문자열을 반환한다. 예를 들면, 다음과 같다.&lt;/p&gt;
&lt;p&gt;var s = &quot;hello&quot;; // &quot;hello&quot; 문자열을 사용한다.
s.toUpperCase(); // &quot;HELLO&quot;을 반환한다, 하지만 s는 변경되지 않는다.
s // =&gt; &quot;hello&quot;; 원래의 문자열은 바뀌지 않았다.&lt;/p&gt;
&lt;p&gt;원시 타입은 값으로 비교된다. 두 값은 같은 값이어야만 같다. 이는 숫자와 불리언 값, null, undefined에도 마찬가지다. 이들을 비교할 수 있는 다른 방법은 없다. 하지만 문자열은 원시 타입과 다르다. 서로 다른 문자열 값을 비교할 때, 자바스크립트는 두 문자열의 길이가 같고 각 인덱스에 있는 문자들이 같다면 두 문자열을 같다고 판단한다. 객체는 원시 타입과는 다르다. 먼저, 객체는 자신의 값을 변경할 수 있다(mutable)&lt;/p&gt;
&lt;p&gt;var o = { x:1 }; // 객체를 선언한다.
o.x = 2; // 프로퍼티의 값을 변경함으로써 객체를 변경한다.
o.y = 3; // 다시 새로운 프로퍼티를 추가하는 것으로 객체를 변경한다.
var a = [1,2,3] // 배열은 타입이 고정되어 있지 않다.
a[0] = 0; // 하나의 배열 원소 값을 바꾼다.
a[3] = 4; // 새로운 하나의 배열 원소를 추가한다.&lt;/p&gt;
&lt;p&gt;객체는 값으로 비교되지 않는다. 다시 말해, 두 객체가 같은 프로퍼티와 값을 가지고 있어도 두 객체는 같지 않다. 그리고 두 배열은 같은 순서로 같은 원소를 갖고 있어도 같지 않다.&lt;/p&gt;
&lt;p&gt;var o = { x : 1 }, p = { x :1 }; // 같은 프로퍼티를 가지고 있는 두 객체
o === p // =&gt; false: 같지 않은 다른 두 객체
var a = [ ], b = [ ]; // 두 개의 빈 배열 a와 b를 선언
a === b // =&gt; false: 두 배열 a와 b는 같지 않다.&lt;/p&gt;
&lt;p&gt;객체는 참조 타입(reference type)으로 불리는데, 이는 자바스크립트의 원시 타입과 구별하기 위해서다. 이 용어를 사용하자면, 객체의 값은 참조다. 다시 말해, 객체는 참조로 비교된다고 할 수 있다. 두 객체 값은 그들이 같은 객체를 참조한다면 같다.&lt;/p&gt;
&lt;p&gt;var a = []; // 변수 a는 빈 배열을 참조한다.
bar b = a; // 변수 b는 a와 같은 배열을 참조한다.
b[0] = 1; // 변수 b가 참조하는 배열을 변경한다.
a[0] // =&gt; 1: 변수 a를 통해서도 바뀐 점을 볼 수 있다.
a === ㅠ // =&gt; true: 변수 a와 b는 한 객체를 참조하기 때문에 a와 b는 같
다.&lt;/p&gt;
&lt;p&gt;방금 코드를 통해 살펴보았듯이, 객체를 변수에 할당하는 것은 단순히 참조를 할당하는 것이다. 이는 객체의 새로운 복사본을 생성하지 않는다. 객체 혹은 배열의 새로운 복사본을 만들고 싶다면 여러분은 명시적으로 객체의 프로퍼티 또는 배열의 원소를 복사해야 한다. 다음은 for 루프를 사용해 배열 a의 원소를 복사하는 예제다.&lt;/p&gt;
&lt;p&gt;var a = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]; // 복사하고자 하는 배열
var b = []; // 복사해 넣을 배열
for ( var i = 0; i &amp;#x3C; a.length; i++ ) { // 배열 a의 각 인덱스
b[i] = a[i]; // a의 원소를 b로 복사한다.
}&lt;/p&gt;
&lt;p&gt;비슷하게, 두 다른 객체 또는 배열을 서로 비교하고 싶다면 그들의 프로퍼티 또는 원소를 비교해야 한다. 다음은 두 배열을 비교하는 함수를 정의한다.&lt;/p&gt;
&lt;p&gt;function equalArrays (a,b) {
if (a.length != b.length) return false; // 크기가 다른 배열은 같지 않다.
for ( var i = 0; i &amp;#x3C; a.length; i++) // 모든 원소를 순회한다.
if (a[i] !== b[i]) return false; // 일부 원소가 서로 다르다면,
// 두 배열은 같지 않다.
return true; // 서로 다른 원소가 없다면 두 배열은 같다.
}&lt;/p&gt;
&lt;p&gt;3.8 타입 변환&lt;/p&gt;
&lt;p&gt;자바스크립트는 타입에 대해 매우 유연하다. 앞서 불리언에 대해 이야기 할 때 이런 점에 대해 살펴보았다. 자바스크립트가 불리언 값을 기대할 때, 여러분은 어떤 타입의 값이든 전달할 수 있고, 자바스크립트는 그 값을 필요에 따라 변환할 것이다. 어떤 값(&apos;참&apos;으로 판정되는 값)은 true로 변환하고 다른 값(&apos;거짓&apos;으로 판정되는 값)들은 false로 변환한다. 이는 다른 타입들도 마찬가지다. 자바스크립트가 문자열을 원한다면, 문자열이 올 자리에 어떤 값을 전달하더라도 문자열로 변환될 것이다. 자바스크립트가 숫자를 원한다면 숫자가 올 자리에 다른 어떤 값이 오더라도 숫자로 변환될 것이다(또는 의미 있는 변환을 할 수 없다면 NaN으로 변환될 것이다). 몇가지 예를 보자.&lt;/p&gt;
&lt;p&gt;10 + &quot; object&quot; // =&gt; &quot;10 object&quot;. 숫자 10은 문자열로 변환된다.
&quot;7&quot; * &quot;4&quot; // =&gt; 28: 두 문자열은 숫자로 변환된다.
var n = 1 - &quot;x&quot;; // =&gt; NaN: 문자열 &quot;x&quot;는 숫자로 변환할 수 없다.
n + &quot; object&quot; // =&gt; &quot;NaN object&quot;: NaN은 문자열 &quot;NaN&quot;으로 변환된다.&lt;/p&gt;
&lt;p&gt;표 3-2에서는 자바스크립트가 어떻게 값을 다른 타입으로 변환하는지 정리하였다. 굵게 표시된 부분은 여러분이 놀라워할 변환을 강조한다. 빈 부분은 변환이 필요 없고 어떤 변환도 수행되지 않음을 보여준다.
표 3-2에 정리된 원시 타입 간의 변환은 상대적으로 간단하다. 불리언으로의 변환에 대해서는 이미 살펴봤다. 문자열로의 변환은 모든 원시 타입에 대해서 잘 정의되어 있다. 하지만 숫자로의 변환은 조금 까다롭다. 숫자로 파싱할 수 있는 문자열은 숫자로 변환한다. 앞뒤 공백은 허용되지만, 공백이나 숫자가 아닌 문자들이 앞뒤에 붙어 있으면 변환 결과는 NaN이 된다. 놀라워 보일만한 변환 결과들도 있다. true는 1로 변환되고 false와 빈 문자열 &quot;&quot;은 0으로 변환되는 것이다.&lt;/p&gt;
&lt;p&gt;원시 타입에서 객체로의 변환은 복잡하지 않다. 원시 타입은 String(), Number(), Boolean() 생성자를 호출함으로써 래퍼 객체로 변환할 수 있다.
예외적으로 null과 undefined는 변환할 수 없다. 객체가 올 자리에 null 또는 undefined를 사용하면 변환 대신 TypeError 예외가 발생한다. 객체에서 원시 타입으로의 변환은 다소 복잡하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;                      자바스크립트 타입 변환&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.8.1 변환과 동치&lt;/p&gt;
&lt;p&gt;자바스크립트는 값의 타입을 유연하게 변환시킬 수 있다. 따라서, 동치 연산자 ==도 유연하게 동작한다. 예를 들어, 다음의 동등 비교 예제들은 모두 true다.&lt;/p&gt;
&lt;p&gt;null == undefined // 이 두 값은 같다고 판단된다.
&quot;0&quot; == 0 // 비교하기 전에 숫자로 변환한다.
0 == false // 불리언은 비교하기 전에 숫자로 변환한다.
&quot;0&quot; == false // 두 피연산자는 비교하기 전에 숫자로 변환한다.&lt;/p&gt;
&lt;p&gt;서로 변환 가능한 값이라고 해서 동치인 것은 아니다. 예를 들어 undefined가 불리언 값이 올 자리에 사용되면 undefiend는 false로 변환된다. 하지만 이것이 undefined == false 임을 의미하지는 않는다. 자바스크립트에는 다양한 연산자와 구문이 있고, 각각의 타입 변환 방식은 서로 다를 수 있다. if문은 undefined를 false로 변환하지만, == 연산자는 피연산자를 불리언으로 변환하지 않는다.&lt;/p&gt;
&lt;p&gt;3.8.2 명시적 변환&lt;/p&gt;
&lt;p&gt;자바스크립트는 많은 형 변환을 자동으로 수행하지만, 명시적 변환이 필요할 때가 있다. 코드를 깔끔하게 유지하기 위해, 변환을 명시적으로 하는 것을 더 선호 할 수도 있을 것이다.
명시적으로 타입 변환을 수행하는 가장 간단한 방법은 Boolean(), Number(), String(), Object() 함수를 사용하는 것이다. new 연산자 없이 호출되면, 이 함수들은 변환 함수로 작동하고 표 3-2에 요약된 변환을 수행한다.&lt;/p&gt;
&lt;p&gt;Number(&quot;3&quot;) // =&gt; 3
String(false) // =&gt; &quot;false&quot; false.toString()도 마찬가지다.
Boolean( [ ] ) // =&gt; true
Object(3) // =&gt; new Number(3)&lt;/p&gt;
&lt;p&gt;null과 undefined를 제외한 모든 값은 toString() 메서드를 가지고 있으며, 이 메서드의 결과는 보통 String() 함수가 반환하는 값과 같다. 표 3-2는 null과 undefined를 객체로 변환하려고 하면 TypeError가 발생한다고 명시하고 있다. 그러나 Object() 함수는 이런 경우에 예외를 발생시키지 않는다. 대신 새로 생성된 빈 객체를 반환한다.
어떤 자바스크립트 연산자는 암시적(implicit) 타입 변환을 수행하므로 종종 타입 변환 목적으로 사용된다. + 연산자는 한 피연산자가 문자열이라면 다른 피연산자를 문자열로 변환한다. 단항 연산자는 +는 피연산자를 숫자로 변환한다. 단항 연산자 !는 피연산자를 불리언으로 변환한 다음 부정 (negate) 연산을 한다. 그래서 나온 것이, 아래의 타입 변환 숙어(idiom)들이다.&lt;/p&gt;
&lt;p&gt;x + &quot;&quot; // String(x)와 같다
+x // Number(x)와 같다. 결과는 x-0이다.
!!x // Boolean(x)과 같다. 두 개의 !를 주목하라&lt;/p&gt;
&lt;p&gt;자를 정형화하고 해석하는 것은 컴퓨터 프로그램에서 일반적인 작업이다. 이러한 작업을 위해서 자바스크립트는 숫자를 문자로 변환하거나 문자를 숫자로 변환할 때, 결과 값의 형태를 좀 더 자세히 표현할 수 있는 함수와 메서드를 지원하고 있다.
Number 클래스에 정의된 toString() 메서드는 기수(radix)를 정하는 선택적 인자를 받는다. 이 인자들을 전달하지 않는다면 기수를 10으로 하여 변환을 수행한다. 2에서 36까지의 값을 전달하면 해당 숫자를 기수로 하여 변환한다.&lt;/p&gt;
&lt;p&gt;var n = 17;
binary&lt;em&gt;string = n.toString(2); // &quot;10001&quot;로 평가된다.
octal&lt;/em&gt;string = &quot;0&quot; + n.toString(8); // &quot;021&quot;로 평가된다.
hex_string = &quot;0x&quot; + n.toString(16); // &quot;ox11&quot;로 평가된다.&lt;/p&gt;
&lt;p&gt;금융 또는 과학적인 데이터를 문자열로 변환하는 경우, 소수점 이하 자릿수를 제어하고 싶을 수도 있고, 지수 표기법(exponential notaion)을 사용하고 싶을 수도 있다. Number 클래스는 그런 용도에 맞는 세 가지 메서드를 제공한다. toFixed() 메서드는 결과 문자열의 소수점 이하 자릿수 개수를 인자와 똑같이 맞춘 문자열을 반환한다. toFixed() 메서드는 지수 표기법을 사용하지 않는다. toExponential() 메서드는 지수 표기법을 사용하여 소수점 앞에 숫자 하나와 소수점 뒤에 인자로 지정한 만큼의 자릿수를 놓는 방식으로 숫자를 문자열로 변환한다(유효 자릿수의 숫자가 지정한 값보다 1 크다는 의미다).&lt;/p&gt;
&lt;p&gt;toPrecision() 메서드는 여러분이 정의한 유효 자릿수로 숫자를 문자열로 변환한다. toPrecision()은 유효 자릿수가 숫자의 전체 정수 부분을 표시할 정도로 크지 않다면 지수 표기법을 사용한다. 이 세 가지 메서드 모두, 결과 문자열 내에서 나머지 숫자들을 적절히 반올림하거나, 필요할 경우 0을 붙인다는 점에 유의하라. 예를 들면, 다음과 같다.&lt;/p&gt;
&lt;p&gt;var n = 123456.789
n.toFixed(0); // &quot;123457&quot;
n.toFixed(2); // &quot;123456.79&quot;
n.toFixed(5); // &quot;123456.78900&quot;
n.toExponential(1); // &quot;1.2e+5&quot;
n.toExponential(3); // &quot;1.235e+5&quot;
n.toPrecision(4); // &quot;1.235e+5&quot;
n.toPrecision(7); // &quot;123456.8&quot;
n.toPrecision(10); // &quot;123456.7890&quot;&lt;/p&gt;
&lt;p&gt;여러분이 문자열을 Number() 변환 함수로 넘긴다면, 변환 함수는 문자열을 정수 혹은 실수 리터럴로 해석할 것이다. Number() 함수는 10진수 정수만 처리할 수 있고 그 뒤에 숫자 아닌 문자가 오는 것을 허용하지 않는다. 한편 parseInt()와 parseFloat() 함수는 리터럴의 일부가 숫자가 아니어도 된다는 점에서 Number()보다 좀 더 유연하게 동작한다. 참고로 이 두 함수들은 Number 클래스의 메서드가 아닌 전역 함수다. parseInt()는 정수만 변환할 수 있지만 parseFloat()는 정수와 부동소수점 모두 변환할 수 있다. 만약 문자열이 &apos;0x&apos;나 &apos;OX&apos;로 시작하면 parseInt() 는 문자열을 16진수 숫자로 인식한다.&lt;/p&gt;
&lt;p&gt;parseInt()와 parseFloat() 모두 앞부분 빈 공백을 무시하고 숫자 다음에 나오는 숫자 아닌 문자들도 무시한다. 첫 번째 공백이 아닌 문자가 유효한 숫자 리터럴이 아니라면 NaN을 반환한다.&lt;/p&gt;
&lt;p&gt;parseInt(&quot;3 blind mice&quot;) // =&gt; 3
parseFloat(&quot; 3.14 meters&quot;) // =&gt; 3.14
parseInt(&quot;-12.34&quot;) // =&gt; -12
parseInt(&quot;0xFF&quot;) // =&gt; 255
parseInt(&quot;-0XFF&quot;) // =&gt; -255
parseFloat(&quot;.1&quot;) // =&gt; 0.1
parseInt(&quot;0.1&quot;) // =&gt; 0
parseInt(&quot;.1&quot;) // =&gt; NaN: 정수는 &quot;.&quot;로 시작할 수 없다
parseFloat(&quot;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;72.47&lt;/mn&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;&amp;quot;&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo separator=&quot;true&quot;&gt;;&lt;/mo&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;/&lt;/mi&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;/&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;숫&lt;/mi&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;자&lt;/mi&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;는&lt;/mi&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;&amp;quot;&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;72.47&amp;quot;);                              // =&amp;gt; NaN: 숫자는 &amp;quot;&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.5782em;vertical-align:-0.0391em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.10903em;&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.10903em;&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.69444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;숫&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;자&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;는&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&quot;로 시작할 수 없다&lt;/p&gt;
&lt;p&gt;parseInt()는 해석될 숫자의 기수(밑)를 정의하는 선택적인 두 번째 인자를 받는다. 숫자는 2와 36 사이에서 유효하다. 예를 들면 아래와 같다.&lt;/p&gt;
&lt;p&gt;parseInt(&quot;11&quot;, 2); // =&gt; 3 (1&lt;em&gt;2 + 1)
parseInt(&quot;ff&quot;, 16); // =&gt; 255 (15&lt;/em&gt;16 + 15)
parseInt(&quot;zz&quot;, 36); // =&gt; 1295 (35&lt;em&gt;36 + 35)
parseInt(&quot;077&quot;, 8); // =&gt; 63 (7&lt;/em&gt;8 + 7)
parseInt(&quot;077&quot;, 10); // =&gt; 77 (7*10 + 7)&lt;/p&gt;
&lt;p&gt;3.8.3 객체에서 원시 타입으로 변환&lt;/p&gt;
&lt;p&gt;객체에서 불리언으로의 변환은 간단하다. 모든 객체(배열과 함수를 포함한)는 true로 변환된다. 이는 래퍼 객체도 마찬가지다. new Boolean(false)는 원시 타입이 아니라 객체이므로 true로 변환된다.
객체에서 문자열로 그리고 객체에서 숫자로의 변환은 변환될 객체의 메서드를 호출함으로써 수행된다. 이 과정은 자바스크립트 객체가 변환을 수행하는 두개의 서로 다른 메서드를 가지고 있기 떄문에 다소 복잡하다. 그리고 다음과 같은 특별한 경우가 있어서 다소 복잡하다.&lt;/p&gt;
&lt;p&gt;이번 절에서 설명한 문자열과 숫자로의 전환 규칙은 오직 네이티브 객체에만 적용 가능하다. 호스트 객체(예를 들어 웹브라우저에서 정의한)는 자체 알고리즘에 따라서 숫자와 문자열로 변환이 가능하다.
모든 객체는 두 개의 타입 변환 메서드를 상속한다. 첫 번째 메서드는 toString() 인데, 이 메서드는 객체를 문자열로 표현하여 반환한다. 이 기본 toString() 메서드가 반환하는 문자열에는 별로 흥미로운 구석이 없다.&lt;/p&gt;
&lt;p&gt;( { x:1, y:2}).toString() // =&gt; &quot;[object Object]&quot;&lt;/p&gt;
&lt;p&gt;많은 클래스들이 toString() 메서드를 재정의한다. 예를 들어, Array 클래스에 정의된 toString() 메서드는 각 배열 원소를 문자열로 변환하고, 배열 원소 사이에 쉼표를 삽입하여 이어붙인 문자열을 결과로 반환한다. Function 클래스에 정의된 toString() 메서드는 자바스크립트 구현체가 정의하는 함수의 내부 표현형(representation)을 반환한다. 실제로, 많은 자바스크립트 구현체에서 보통 사용자 정의 함수를 자바스크립트 소스 코드 형태의 문자열로 변환한다. Date 클래스에 정의된 toString() 메서드는 사람이 읽을 수 있는(그리고 자바스크립트가 파싱할 수 있는) 날짜와 시간 문자열을 반환한다. RegExp 클래스에 정의된 toString() 메서드는 RegExp 객체를 RegExp 리터럴처럼 보이는 문자열로 변환한다.&lt;/p&gt;
&lt;p&gt;[1,2,3].toString() // =&gt; &quot;1,2,3&quot;
(funtion(x) { f(x); }).toString() // =&gt; &quot;function(x) {\n f(x); \n}&quot;
/\d+/g.toString() // =&gt; &quot;/\d+/g&quot;
new Date(2010, 0,1).toString() // =&gt; &quot;Fri jan 01 2010 00:00:00 GMT=0800 (PST)&quot;&lt;/p&gt;
&lt;p&gt;다른 변환 함수로는 valueOf()가 있다. 이 메서드가 하는 일은 잘 정의되어 있지 않다. 원래 이 함수는 객체를 잘 표현하는 원시 타입 값을 반환해야 한다. 그런데 객체는 결합된 값(compound value)이고 대부분의 객체는 하나의 원시 타입 값으로 표현할 수 없기 때문에, 기본적으로 valueOf() 메서드는 원시 타입을 반환하지 않고 단순히 객체 그 자신을 반환한다. 래퍼 클래스는 래핑된 원시 타입의 값을 반환하는 valueOf() 메서드를 정의 한다. 배열, 함수, 정규 표현식은 단순히 기본 메서드를 상속한다. 이와 같은 타입의 객체에서 valueOf()를 호출하면 단순히 객체 그 자체를 반환한다. Date 클래스의 valueOf() 메서드는 객체 내부적으로 날짜를 표현하기 위해 쓰는 값(즉, 현재 시각과 1970년 1월 1일의 차를 밀리초로 표현한 값)을 반환한다.&lt;/p&gt;
&lt;p&gt;var d = new Date(2010, 0, 1); // 2010년 1월 1일, (태평양 시간)
d.valueOf() // =&gt; 1262332800000&lt;/p&gt;
&lt;p&gt;지금껏 설명한 toString()과 valueOf() 메서드를 사용하여 우리는 객체에서 문자열로 그리고 객체에서 숫자로의 변환을 할 수 있다. 하지만, 자바스크립트가 객체에서 원시 타입으로의 변환을 좀 특수하게 처리하는 경우도 있다. 이에 대해서는 이번 절 마지막에서 알아본다.
자바스크립트는 아래의 절차를 거쳐 객체를 문자열로 변환한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;• 객체가 toString() 메서드를 가지고 있다면, 자바스크립트는 이 메서드를 호출한다. toString()이 원시 타입 값을 반환한다면, 자바스크립트는 이 값을 문자열로 변환하여 (이미 문자열이 아니라면) 반환한다. 원시 타입에서 문자열로의 전환 방법은 표 3-2를 참고하기 바란다.
• 객체가 toString() 메서드를 가지고 있지 않거나 이 메서드가 원시 타입 값을 ㅏㄴ환하지 않는다면 자바스크립트는 valueOf() 메서드를 찾는다. valueOf() 메서드가 존재한다면 자바스크립트는 이 메서드를 호출한다. 만약에 반환값이 원시 타입이라면 자바스크립트는 이 값을 문자열(이미 문자열이 아니라면)로 변환하여 반환한다.
• 그렇지 않다면 자바스크립트는 toString() 또는 valueOf()로 부터 원시 타입 값을 얻을 수 없기 때문에 TypeError를 발생시킬 것이다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;객체를 숫자로 전환할 때는 문자열과 같은 방식으로 전환하지만, valueOf() 메서드를 먼저 호출한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;• 객체가 원시 타입의 값을 반환하는 valueOf() 메서드를 가지고 있다면, 자바스크립트는 반환된 가ㅅ을 (필요하다면) 숫자로 변환하여 반환한다.
• 그렇지 않고, 객체가 원시 타입 값 반환하는 toString() 메서드를 가지고 있다면 자바스크립트는 이 값을 변환하여 반환한다.
• 이 외의 경우, 자바스크립트는 TypeError를 발생시킨다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;객체에서 숫자로의 변환에 대한 앞의 설명을 보면, 왜 빈 배열이 숫자 0으로 변환되는지, 왜 한 개의 원소를 가진 배열이 숫자로 변환되는지를 이핼할 수 있다. 배열은 기본적으로 원시 타입 값 대신 객체를 반환하는 valueOf() 메서드를 상속하기 때문에, 배열에서 숫자로의 변환은 toString() 메서드에 의존한다. 빈 배열은 빈 문자열로 변환된다. 그리고 다시 빈 문자열은 숫자 0으로 변환된다. 한개의 원소를 가진 배열은 해당 원소와 같은 문자열로 변환한다. 만약 배열이 한개의 숫자만 가지고 있다면 이 숫자는 문자열로 변환되고, 그 다음에숫자로 다시 변환된다.&lt;/p&gt;
&lt;p&gt;자바스크립트에서 + 연산자는 숫자 덧셈과 문자열 붙이기를 수행한다. + 연산자의 피연산자 중 하나가 객체라면, 자바스크립트는 객체를 다른 산술 연산처럼 객체에서 숫자로 변환하는 대신 객체에서 원시 타입으로 변환한다. == 동치 연산자도 비슷하다. 객체를 원시 타입 값과 비교할 때는, 객체를 원시 타입으로 변환한다.&lt;/p&gt;
&lt;p&gt;+와 == 연산자는 객체를 원시 타입으로 변환할 때 Date 타입 객체는 특별하게 취급한다. Date 클래스는 코어 자바스크립트에 포함되어 있는 타입 가운데, 문자열로의 변환 절차와 수로의 변환 절차를 전부 구현하고 있는 유일한 타입이다. 기본적으로 객체에서 원시 타입으로의 변환은 객체에서 숫자로의 변환이고, 이때 valueOf() 를 먼저 사용한다. Date 객체에 한해서만 객체에서 문자열로 변환하며, 이때 toString()을 먼저 사용한다. 그런데 이러한 변환 과정은 앞서 설명한 것과는 미묘하게 다르다. valueOf()나 toString() 에서 반환된 원시 값은 숫자나 문자열로 변환되지 않고 바로 사용되는 것이다.&lt;/p&gt;
&lt;p&gt;&amp;#x3C; 연산자와 다른 관계 연산자들은 == 연산자가 그랬듯이 객체에서 원시 타입으로의 변환을 수행한다. 하지만 Date 객체를 특별하게 취급하진 않는다. valueof()를 먼저 시도하고, 그 뒤에야 toString()을 시도한다. 그 결과 값은 숫자나 문자열로 추가 변환 없이 바로 사용된다.&lt;/p&gt;
&lt;p&gt;+, ==, != 그리고 관계 연산자들만이 오직 이런 특별한 종류의 문자열-원사 타입 변환을 수행한다. 다른 연산자들은 지정된 타입으로 좀 더 명시적으로 변환하고, Date를 위한 특ㅕ한 처리 절차를 가지고 있지도 않다. 예를 들어 - 연산자는 피연산자를 숫자로 변환한다. 다음 코드는 =, -, ==, &gt; 연산자와 Date 객체와의 상호작용을 보여준다.&lt;/p&gt;
&lt;p&gt;var now = new Date(); // Date 객체 생성
typeof ( now + 1) // =&gt; &quot;string&quot;: +는 날짜를 문자열로 변환시킨다.
typeof ( now = 1) // =&gt; &quot;number&quot;: -는 객체에서 숫자로 변환시킨다.
now == now.toString() // =&gt; true: 암시적 그리고 명확한 문자열 변환.
now &gt; ( now -1) // =&gt; true: &gt; Date에서 숫자로 변환하라.&lt;/p&gt;
&lt;p&gt;3.9 변수 선언&lt;/p&gt;
&lt;p&gt;자바스크립트에서는 변수를 사용하기 전에 변수 선언(declaration)을 해야 한다. 변수는 다음과 같이 var 키워드를 이용하여 선언한다.&lt;/p&gt;
&lt;p&gt;var i;
var sum;&lt;/p&gt;
&lt;p&gt;var 키워드를 이용하여 여러 개의 변수를 선언할 수도 있다.&lt;/p&gt;
&lt;p&gt;var i, sum;&lt;/p&gt;
&lt;p&gt;그리고 변수 선언과 동시에 초기화를 할 수도 있다.&lt;/p&gt;
&lt;p&gt;var message = &quot;hello&quot;;
var i = 0, j = 0, k = 0;&lt;/p&gt;
&lt;p&gt;var 문에서 변수에 초기 값을 지정하지 않는다면, 변수는 값이 설정될 때까지 undefined 값을 갖게 된다.
var 문은 for와 for/in 루프 안에 올 수도 있다. 이를 통해 루프 문법 안에서 루프 변수(loop variable)를 간결하게 정의할 수 있다.&lt;/p&gt;
&lt;p&gt;for(var i = 0; i &amp;#x3C; 10; i++) console.log(i);
for(var i = 0, j = 10; i &amp;#x3C; 10; i++, j-- _ console.log(i*j);
for(var p in o ) console.log(p);&lt;/p&gt;
&lt;p&gt;C나 자바 같은 정적 타입의 언어를 다룬 적이 있다면, 자바스크립트 변수 선언에는 타입을 명시하지 않음을 알 수 있을 것이다. 예를 들어, 자바스크립트에서는 변수에 숫자를 할당했다가 나중에 문자열을 할당해도 문법적으로 문제가 없다.&lt;/p&gt;
&lt;p&gt;var i = 10;
i = &quot;ten&quot;;&lt;/p&gt;
&lt;p&gt;3.9.1 반복된 선언과 생략된 선언&lt;/p&gt;
&lt;p&gt;var 문장에서는 변수를 하나 이상 선언할 수 있다. 반복된 변수 선언에 초기값이 부여된 경우, 선언문은 마치 대입문 처럼 동작한다.
선언하지 않은 변수를 읽으려 하면 자바스크립트는 에러를 발생 시킨다. ECMAScript 5 엄격 모드에서는 선언하지 않은 변수에 값을 넣으려해도 에러가 발생한다. 하지만 역사적으로 비-엄격 모드(non-strict mode)에서는 선언하지 않은 변수에 값을 배정하면, 그 변수는 전역 객체의 속성으로 생성되어, 마치 미리 선언했던 전역 변수처럼 동작하게 된다(하지만 완전히 같지는 않다.) 이는 전역 변수를 선언하지 않은 채 사용할 수 있다는 의미다. 하지만 이것은 나쁜 슨괍이며 버그의 근원이므로, 항상 변수는 var로 선언하도록 해야 한다.&lt;/p&gt;
&lt;p&gt;3.10 변수의 유효범위&lt;/p&gt;
&lt;p&gt;변수의 유효범위란 프로그램에서 어떤 변수가 정의되어 있는 영역을 말한다. 전역 변수의 유효범위는 전역적이다. 전역 변수(global variable)는 자바스크립트 코드 전체에 걸쳐 정의되어 있다. 반면, 어떤 함수 안에서 선언된 변수는 오직 해당 함수 몸체 안에서만 정의된다. 이런 변수는 지역 변수(local variable)라 불리며,유효범위도 지역적이다. 함수의 매개변수 역시 지역 변수이며 오직 해당 함수 내부에서만 정의된다.&lt;/p&gt;
&lt;p&gt;같은 이름을 갖는 경우, 함수 내부에서 지역 변수는 전역 변수에 우선한다. 지역 변수 혹은 함수 매개변수를 전역 변수와 같은 이름으로 선언하면, 전역 변수를 감춰버리게 된다.&lt;/p&gt;
&lt;p&gt;var scope = &quot;global&quot;; // 전역 변수를 선언한다.
function checkscope() {
var scope = &quot;local&quot;; // 전역변수와 같은 이름으로 지역 변수를 선언한다.
return scope; // 전역 변수가 아닌 지역 변수를 반환한다.
}
checkscope() // =&gt; &quot;local&quot;&lt;/p&gt;
&lt;p&gt;전역 유효범위에서는 var문을 사용하지 않고 전역 변수를 선언할 수 있지만, 지역 변수를 선언하기 위해서는 반드시 var를 사용해야 한다. 그렇게 하지 않을 때 어떤 일이 발생하는지 다음 예제를 통해 살펴보자.&lt;/p&gt;
&lt;p&gt;scope = &quot;global&quot;; // var 없이 전역 변수를 선언한다.&lt;/p&gt;
&lt;p&gt;function checkscope2() {
scope = &quot;local&quot;; // 이런! 전역 변수를 바꿔버렸네!
myscope = &quot;local&quot;; // 암묵적으로 전역 변수를 선언한다.
return [scope, myscope]; // 두 변수의 값을 반환한다.
}
checkscope2() // =&gt; [&quot;local&quot;, &quot;local&quot;] : 부작용 발견!
scope // =&gt; &quot;local&quot;: 전역 변수가 바뀌었다.
myscope // =&gt; &quot;local&quot;: 전역 네임스페이스가 지역 변수로 오염되었다.&lt;/p&gt;
&lt;p&gt;함수 정의는 중첩될 수 있다. 각 함수에는 자신만의 유효범위가 있다. 따라서 지역 유효범위도 여러 단계로 중첩될 수 있다. 다음 코드를 살펴보자.&lt;/p&gt;
&lt;p&gt;var scope = &quot;global scope&quot;; // 전역 변수&lt;/p&gt;
&lt;p&gt;function checkscope() {
var scope = &quot;local scope&quot;; // 지역 변수
function nested() {&lt;br&gt;
var scope = &quot;nested scope&quot;; // 함수 안에 포함된 유효범위의 지역 변수
return scope; // nested() 안의 변수를 반환한다.
}
return nested();
}
checkscope() // =&gt; &quot;nested scope&quot;&lt;/p&gt;
&lt;p&gt;3.10.1 함수 유효범위와 끌어올림(hoisting)&lt;/p&gt;
&lt;p&gt;C같은 프로그래밍 언어에서 블록 안에 있는 코드는 자신만의 유효범위를 가지며, 변수는 해당 변수가 선언되지 않은 블록 밖에서는 보이지 않는다. 이를 블록 유효범위(block scope)라 부르는데, 자바스크립트에는 블록 유효범위의 개념이 없다. 대신에, 자바스크립트는 함수 유효범위를 사용한다. 변수는 해당 변수가 정의된 함수 안에서 보일 뿐 아니라, 그 함수 안에 중첩된 함수 안에서도 보인다.
다음 코드에서 변수 i, j, k는 다른 위치에 선언되지만 모두 같은 유효범위를 갖는다. 다시 말해, 세 변수는 모두 함수의 몸체 안에 정의되어 있다.&lt;/p&gt;
&lt;p&gt;function test(0) {
var i = 0; // i는 함수 전체에 걸쳐 정의된다.
if (typeof o == &quot;object&quot;) {
var j = 0; // j는 블록뿐만 아니라&lt;br&gt;
// 함수 전체에 걸쳐 정의된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;     for(var k = 0; k &amp;lt; 10; k++ ) {            // k는 반복문 외에도 함수 전체에 걸쳐 정의된다.
           console.log(k);                         // 숫자 0부터 9까지 출력한다.
      }
      console.log(k);                              // k는 여전히 정의되어 있다.
                                                      // 10을 출력한다.
  }
  console.log(j);                                  // j는 정의되어 있고,
                                                      // 초기화되어 있지 않을 것이다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;자바스크립트의 함수 유효범위(function scope)는, 어떤 함수 안에서 선언된 모든 변수는 그 함수 전체에 걸쳐 유효하다는 의미다. 흥미롭게도, 이는 변수가 미처 선언되기 전에도 유효하다는 뜻이기도 하다. 이런 자바스크립트의 특징은 비공식적으로 끌어올림(hoisting)이라고 알려져 있다. 자바스크립트 코드는 함수안에 있는 모든 변수를 함수 맨 꼭대기로 &apos;끌어올린&apos; 것처럼(하지만 배정문까지 끌어올리지는 않는다) 동작한다. 다음 예제를 통해 살펴보자.&lt;/p&gt;
&lt;p&gt;var scope = &quot;global&quot;;
function f() {
console.log(scope); // &quot;global&quot;이 아니라 &quot;undefined&quot;를 출력한다.
var scope = &quot;local&quot;; // 여기서 초기화하지만, 정의는 다른 곳에서 이루어졌다.
console.log(scope); // &quot;local&quot;을 출력한다.
}&lt;/p&gt;
&lt;p&gt;지역 변수를 선언하는 var문이 아직 실행되지 않았기 떄문에 여러분은 이 함수의 1행이 &quot;global&quot;을 출력할 거라고 착각할 수 있다. 하지만, 함수 유효범위 규칙 때문에 실제로는 그렇지 않다. 지역 변수는 함수 전체에 걸쳐서 정의된다. 즉, 같은 이름의 전역 변수는 함수 전체에서 이 지역 변수에 의해 감춰진다. 지역 변수가 함수 전체에 걸쳐 정의되었더라도 var문이 실행되고 나서야 실제로 초기화된다. 따라서 이 함수는 다음 코드와 같다. 그리고 변수 선언은 함수 맨 꼭대기로 &apos;끌어올려(hoisted)&apos;지고, 초기화는 원래대로 세 번째 줄 대입문이 처리하게 된다.&lt;/p&gt;
&lt;p&gt;function f() {
var scope; // 지역 변수는 함수 맨 꼭대기에서 선언한다.
console.log(scope); // scope 변수는 존재하지만 아직 &quot;undefined&quot; 값이다.
scope = &quot;local&quot;; // 이제 scope 변수가 초기화되고 제대로 된 값이 있다.
console.log(scope); // 여기서는 우리가 기대한 값이 들어 있다.
}&lt;/p&gt;
&lt;p&gt;블록 유효범위를 가진 프로그래밍 언어에서 일반적으로 변수를 선언하는 좋은 프로그래밍 방법은, 가능한 한 그 변수가 사용되는 가장 가까운 곳에서 선언하는 것이다. 하지만 자바스크립트는 블록 유효범위를 가지고 있지 않기 때문에 어떤 개발자는 모든 변수를 변수가 사용되는 위치와 가까운 곳에 선언하지 않고 함수의 맨 꼭대기에 선언할지도 모른다. 그렇게 하면 변수의 진정한 유효범위가 소스 코드에 정확하게 반영될 것이다.&lt;/p&gt;
&lt;p&gt;3.10.2 프로퍼티로서의 변수&lt;/p&gt;
&lt;p&gt;전역 자바스크립트 변수를 선언한다는 것은, 실제로는 전역 객체의 프로퍼티를 정의하는 것이다. 변수를 선언하려고 var를 사용하면, 생성된 프로퍼티는 수정 가능하지 않고(unconfigurable) 이것은 delete 연산자로 소멸시킬 수 없다는 뜻이다. 앞서 엄격 모드가 아닌 상황에서 선언하지 않은 변수에 값을 대입하려고 하면 자바스크립트는 자동으로 전역 변수를 생성한다고 얘기했었다. 이런 식으로 생성된 변수는 전역 객체의 평범하고 수정 가능한 (configurable) 프로퍼티이며 삭제할 수도 있다.&lt;/p&gt;
&lt;p&gt;var truevar = 1; // 올바르게 선언한 전역 변수, 삭제할 수 없다.
fakevar = 2; // 삭제 가능한 전역 변수
this.fakevar2 = 3; // 삭제 가능한 전역 변수
delete truevar // =&gt; false: 변수는 삭제할 수 없다.
delete fakevar // =&gt; true: 변수는 삭제된다.
delete this.fakevar2 // =&gt; true: 변수는 삭제된다.&lt;/p&gt;
&lt;p&gt;자바스크립트 전역 변수는 전역 객체의 프로퍼티로, 이는 ECMAScript 명세에 규정되어 있다. 지역 변수에는 그런 규정이 없지만, 변수를 각 함수 호출과 연관된 객체의 프로퍼티로 생각해도 된다. ECMAScript 3 명세는 이러한 객체를 &apos;호출 객체(call object)&apos;라고 하고, ECMAScript 5 명세는 이를 &apos;선언적 환경 기록(declarative environment record)&apos;이라 부른다. 자바스크립트는 this 키워드로 전역 객체를 참조할 수 있도록 한다. 하지만 지역 변수가 저장된 객체를 참조할 방법은 제공하지 않는다. 지역 변수를 들고 있는 이런 객체들의 속성은 구현 세부사항에 해당하는 것이라서 우리가 신경 쓸 필요가 없다. 하지만 지역 변수 객체가 존재한다는 개념은 중요하고, 다음 절에서 좀 더 자세히 설명한다.&lt;/p&gt;
&lt;p&gt;3.10.3 유효범위 체인&lt;/p&gt;
&lt;p&gt;자바스크립트는 언어적으로 유효범위를 가지고 있는 (lexically scoped) 언어다. 변수의 유효범위란 정의된 변수를 사용 가능한 소스 코드의 집합으로 생각할 수 있다. 전역 변수는 프로그램 전체에 걸쳐 유효하다. 지역 변수는 변수가 선언된 함수 전체에 걸쳐 유효하고, 그 안에 중첩된 함수 내에서도 유효하다.
우리가 지역 변수를 (구현 세부사항에 속하는 어떤) 객체의 프로퍼티로 생각한다면, 변수 유효범위를 다른 관점으로 볼 수도 있다. 자바스크립트의 모든 코드 무더기는 (전역 코드이건 함수이건) 그것과 연관된 유효범위 체인(scope chain)을 가지고 있다. 이 유효범위 체인은 해당 코드 무더기의 &apos;범위 안(in scope)&apos;에 있는 변수를 정의하는 객체의 체인, 다시 말해 리스트다. 자바스크립트가 변수 x의 값을 얻어야 할 때 (변수 해석(variable resolution 이라 일컫는 과정) 처음 체인에 있는 객체에서 x를 찾기 시작한다. 만약 이 객체가 이름이 x인 프로퍼티를 가지고 있다면, 그대로 사용한다. 만약 첫 번째 객체가 x 프로퍼티를 가지고 있지 않다면 자바스크립트는 체인에 있는 다음 객체에서 x 프로퍼티를 찾는다. 두 번째 객체가 x 프로퍼티를 가지고 있지 않다면 또 다음 객체에서 찾는다. x가 유효범위 체인 안에 있는 객체의 프로퍼티가 아니라면 x 는 유효범위 안에 없기 때문에 ReferenceError가 발생한다.&lt;/p&gt;
&lt;p&gt;최상위 자바스크립트 코드의 경우(어떤 함수에도 속하지 않는 코드), 유효범위 체인은 단 하나의 &apos;전역 객체&apos;만으로 이루어진다. 중첩되지 않은 함수의 유효 범위 체인은 두 개의 객체로 이루어진다. 하나는 함수 매개변수와 지역 변수를 정의하는 객체고, 다른 하나는 전역 객체다. 중첩된 함수에서 유효범위 체인은 세 개 이상의 객체를 갖는다. 객체의 유효범위 체인이 어떻게 생성되는지는 반드시 이해해야 한다. 함수가 정의될 때, 함수는 유효범위 체인을 저장한다. 함수가 호출될 때, 해당 함수의 지역 변수를 저장하기 위해서 새로운 객체를 하나 생성하고, 해당 객체를 기존에 저장된 유효범위 체인에 추가한다. 중첩 함수의 경우에는 외부에서 함수를 호출할 때마다 유효범위 체인이 조금씩 달라진다. 물론 중첩된 함수의 코드는 항상 동일하지만, 그 코드에 관계된 유효범위 체인은 함수를 호출할 때마다 달라지게 된다.
이 유효범위 체인의 개념은 with문(5.7.1 참고)을 이해하는 데 도움이 되고, 클로저(8.6절 참고)를 이해하는 데도 굉장히 중요하다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[javascript 어휘구조]]></title><description><![CDATA[자바스크립트 프로그램은 unicode 문자 집합을 사용해 작성된다. unicode는 ASCII나 Latin-1의 상위 집합이고 지구상에서 사용되는 대부분의 문자를 표현할 수 있다. 자바스크립트는 대소문자를 구분하는 언어다. 다시 말해 키워드, 변수,…]]></description><link>https://nicorobinv.github.io/javascript-study_1/</link><guid isPermaLink="false">https://nicorobinv.github.io/javascript-study_1/</guid><pubDate>Tue, 28 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;자바스크립트 프로그램은 unicode 문자 집합을 사용해 작성된다. unicode는 ASCII나 Latin-1의 상위 집합이고 지구상에서 사용되는 대부분의 문자를 표현할 수 있다.&lt;/p&gt;
&lt;p&gt;자바스크립트는 대소문자를 구분하는 언어다. 다시 말해 키워드, 변수, 함수 이름, 식별자들은 모두 항상 대소문자를 구분해 입력해야 한다. 그러나 HTML은 대소문자를 구별하지 않는다. HTML이 클라이언트 측 자바스크립트와 밀접한 연관이 있기 떄문에 이 점이 약한 혼동될 수 있다. 많은 클라이언트 측 자바스크립트 객체와 프로퍼티 이름은 HTML 태그나 태그 속성(attribute)의 이름과 동일하다. 그런데 HTML에서는 태그나 속성 이름을 대소문자 구분 없이 입력해도 되지만, 자바스크립트에서는 모두 소문자로 입력해야 한다.&lt;/p&gt;
&lt;p&gt;2.1.2 공백, 줄바꿈, 제어 문자
자바스크립트는 프로그램 코드 내의 토큰(토큰이란 프로그래밍 언어에서 더 이상 나눌수 없는 최소한의 단위이며, 키워드나 변수의 이름, 숫자 등이 여기에 해당한다.) 들 사이에 있는 공백들을 무시한다.&lt;/p&gt;
&lt;p&gt;2.2 주석&lt;/p&gt;
&lt;p&gt;자바스크ㅂ트는 두 가지 형태의 주석을 지원한다. //와 줄 끝 사이에 있는 텍스트는 모두 주석으로 취급되어 자바스크립트에 의해 무시된다. /_와 _/ 사이의 텍스트도 모두 주석으로 취급된다. 이때, 주석은 여러 줄에 걸쳐 나타날수 있지만 서로 중첩될 수 없다. 다음의 코드는 모두 올바른 자바스크립트 주석이다.&lt;/p&gt;
&lt;p&gt;// 한 줄짜리 주석
/_ 이것도 주석 _/ // 또 다른 주석/*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;또 다른 주석&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여러 줄에 걸쳐 있다. */&lt;/p&gt;
&lt;p&gt;2.3 리터럴&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;리터럴(literal)은 프로그램에 직접 나타나는 데이터 값이다. 다음의 코드는 모두 리터럴이다.
12 // 숫자 12
1.2 // 숫자 1.2
&quot;hello world&quot; // 문자열
&apos;Hi&apos; // 다른 문자열
true // 불리언 값
false // 다른 불리언 값
/javascript/hi // &apos;정규 표현식&apos; 리터럴(패턴 매칭용)
null // 객체가 존재하지 않음&lt;/p&gt;
&lt;p&gt;배열이나 객체 리터럴을 위한 좀 더 복잡한 표션식도 지원한다. 예를 들어, 다음과 같다.
{ x:1, y:2 } // 객체 초기자
[1,2,3,4,5] // 배열 초기자&lt;/p&gt;
&lt;p&gt;2.4 식별자와 예약어&lt;/p&gt;
&lt;p&gt;식별자(identifier)는 간단히 말해 이름이다. 자바스크립트에서 식별자는 변수나 함수에 이름을 붙이거나 코드 내 반복문에서 쓸 레이블을 붙이는 데 사용된다. 자바스크립트 식별자의 시작은 알파벳, 밑줄(_) 혹은 달러($) 표시여야 한다. 이어지는 문자들은 알파벳이나 숫자, 밑줄 혹은 달러 표시여야 한다(식별자의 첫 글자로 숫자를 허용하지 않는 이유는 자바스크립트가 숫자와 식별자를 쉽게 구별하기 위함이다). 다음은 모두 올바른 식별자다.&lt;/p&gt;
&lt;p&gt;i
my&lt;em&gt;variable&lt;/em&gt;name
v13
_dummy
$str&lt;/p&gt;
&lt;p&gt;다른 언어와 마찬가지로, 자바스크립트에도 언어 내부적으로 사용할 용도로 예약된 식별자들이 있다. 이러한 &apos;예약어(reserved keyword)&apos;는 식별자(변수명, 함수명, 레이블)로 사용할 수 없다.&lt;/p&gt;
&lt;p&gt;2.4.1 예약어&lt;/p&gt;
&lt;p&gt;자바스크립트는 몇 가지 식별자를 미리 선점하고 있다. 다음은 프로그램 내에서 식별자로 사용할 수 없는 단어들이다.&lt;/p&gt;
&lt;p&gt;break delete function return typeof
case do if switch var
catct else in this void
continue false instanceof throw while
debugger finally new true with
default for null try
class const enum export extends import super&lt;/p&gt;
&lt;p&gt;또한, 보통 자바스크립트 코드에서는 식별자로 사용할 수 있지만, 엄격모드 (strict mode)에서는 사용할 수 없는 단어도 있다.&lt;/p&gt;
&lt;p&gt;implements let priviate public yield interface package protected static&lt;/p&gt;
&lt;p&gt;엄격모드에서는 아래의 식별자도 사용이 제한된다. 이 식별자들은 완전히 예약어는 아니지만 변수나 함수 혹은 매개변수 이름으로 사용할 수 없다.&lt;/p&gt;
&lt;p&gt;arguments eval&lt;/p&gt;
&lt;p&gt;자바스크립트는 다음과 같이 몇 가지 전역 변수와 함수를 정의하고 있다. 이 단어들은 프로그램 내에서 변수나 함수 이름으로 사용해서는 안 된다.&lt;/p&gt;
&lt;p&gt;arguments encodeURI infinity number regexp
Array encodeURIComponent isFinite Object String
Boolean Error isNaN parseFloat SyntaxError
Date eval JSON parseInt TypeError
decodeURI EvalError Math RangeError undefined
decodeURIComponent function NaN ReferenceError URIError&lt;/p&gt;
&lt;p&gt;자바스크립트에서는 정의된 전역 변수와 전역 함수가 구현체마다 다를 수 있고, 자바스크립트 내장 방식(클리어이언트 측, 서버 측 등)에 따라 전역 프로퍼티 목록도 다를 수 있다.&lt;/p&gt;
&lt;p&gt;2.5 선택적인 세미콜론 사용&lt;/p&gt;
&lt;p&gt;다른 프로그래밍 언어와 마찬가지로 자바스크립트에서도 문장을 구분하기 위해 세미콜론을 사용한다. 이 점은 코드를 좀 더 의미 있게 만드는 측면에서 볼 때 중요하다. 구분자가 없으면 한 문장의 끝에 다음 문장의 시작이 올수 있고, 그다음 문장도 마찬가지다. 자바스크립트에서는 여러 문장이 서로 다른 줄에 나타나는 경우 세미콜론을 생략할 수 있다( 또한 프로그램의 끝이나 다음 토큰이 } 일 경우에도 세미콜론을 생략할 수 있다).
어떤 스타일을 선택하든 자바스크립트에서 세미콜론이 필수가 아닌 몇 가지 경우에 대해 자세히 이해하고 있어야 한다. 다음 코드를 살펴보자. 두 문장이 각각 다른 줄에 작성되어 있으므로, 첫 행의 세미콜론은 생략할 수 있다.&lt;/p&gt;
&lt;p&gt;a = 3;
b = 4;&lt;/p&gt;
&lt;p&gt;그러나 코드가 다음과 같이 작성된 경우에는 첫 번째 세미콜론이 반드시 필요하다.&lt;/p&gt;
&lt;p&gt;a = 3; b = 4;&lt;/p&gt;
&lt;p&gt;자바스크립트가 항상 모든 줄바꿈을 세미콜론으로 해석하는 것은 아니다. 일반적으로 세미콜론 없이 코드를 해석할 수 없는 경우에만 줄바꿈을 세미콜론으로 해석한다. 더 형식적으로 말하자면 자바스크립트는 다음 줄에 나오는 공백 아닌 첫 문자를 현재 문장과 이어서 해석 할 수 없을 경우에만 줄바꿈을 세미콜론으로 취급한다. 다음 코드를 살펴보자.&lt;/p&gt;
&lt;p&gt;var a
a
=
3
console.log(a)&lt;/p&gt;
&lt;p&gt;자바스크립트는 이 코드를 다음과 같이 해석한다.&lt;/p&gt;
&lt;p&gt;var a ; a = 3; console.log(a);&lt;/p&gt;
&lt;p&gt;자바스크립트는 첫 번째 줄바꿈을 세미콜론으로 취급하는데, 이는 세미콜론 없이 var a a 코드를 해석할 수 없기 때문이다. 두 번째 a는 그 자체로 실행문 a;이 될 수 있지만, 좀 더 긴 문장인 a =3; 으로 해석할 수 있기 떄문에 두 번째 줄바꿈을 세미콜론으로 취급하지 않는다. 이러한 문장 종료 규칙은 상황에 따라 일부 의도하지 않는 결과를 초래할 수 있다. 다음의 코드는 두 가지 별개의 문장을 작성한 것처럼 보인다.&lt;/p&gt;
&lt;p&gt;var y = x + f
(a+b).toString()&lt;/p&gt;
&lt;p&gt;하지만 두 번째 줄의 괄호가 첫 줄의 함수 f를 호출하는 것으로 해석될 수 있기 때문에 자바스크립트는 이 코드를 이렇게 해석한다.&lt;/p&gt;
&lt;p&gt;var y = x + f(a+b).toString();&lt;/p&gt;
&lt;p&gt;이는 십중팔구 코드의 저자가 의도한 해석이 아닐 가능성이 크다. 이 경우에 두개의 별개 문장으로 작동하게 하려면 명시적으로 세미콜론을 사용해야 한다. 일반적으로, 문장이 (, {, /, +, -로 시작하면 자바스크립트 인터프리터는 해당 문장을 이전 문장에 이어서 해석한다. 문장이 /나 +, -로 시작하는 경우는 극히 드물지만, (나 [로 시작하는 문장은 최소한 자바스크립트 프로그래밍에서는 자주 볼 수 있다. 일부 프로그래머들은 문장의 시작 부분에 방어적인 세미콜론을 넣기도 한다. 이렇게 문장을 작성할 경우, 바로 전 문장의 끝에 세미콜론을 빼먹었어도 항상 그 다음 문장은 올바로 해석된다.&lt;/p&gt;
&lt;p&gt;var x = 0 // 세미콜론이 생략됐다.&lt;/p&gt;
&lt;p&gt;;[x, x+1, x+2].forEach(console.log) //문장 앞에 넣은 방어적인 세미콜론이 이 문장을 위의 문장과 구분되게
해준다.&lt;/p&gt;
&lt;p&gt;지금까지 자바스크립트에서 줄바꿈을 세미콜론으로 해석하는 일반적인 규칙에 대해 살펴봤다. 다음 줄을 첫 줄의 문장과 이어서 하나로 처리할 수 없는 경우에만 줄바꿈을 세미콜론으로 해석한다는 일반 규칙에는 두 가지 예외가 있다. 첫번째 예외는 return, break, continue문을 사용했을 경우다. 만약 줄 바꿈이 return, break, continue 문 바로 다음에 올 경우(줄바꿈 문자 이전까지 어떠한 토큰도 사용하지 않았을 경우)에 자바스크립트는 줄바꿈을 세미콜론으로 해석한다. 예를 들어, 다음과 같은 예제를 살펴보자.&lt;/p&gt;
&lt;p&gt;return
true;&lt;/p&gt;
&lt;p&gt;자바스크립트는 여러분이 다음의 코드를 작성하려 했다고 간주한다.&lt;/p&gt;
&lt;p&gt;return; true;&lt;/p&gt;
&lt;p&gt;하지만 여러분이 원했던 코드는 아마도 다음과 같을 것이다.&lt;/p&gt;
&lt;p&gt;return true;&lt;/p&gt;
&lt;p&gt;여기서 알아야 할 점은 return, break, continue와 다음에 오는 키워드 사이에 줄바꿈을 하지 말아야 한다는 것이다. 만약에 줄바꿈을 할 경우, 좀처럼 디버깅하기 힘들고 예상치 못한 경우로 프로그램이 비정상적으로 종료될 수도 있다. 두 번째 예외는 ++나 -- 연산자가 포함된 경우다. 이러한 연산자는 피연산자가 전에 오면 전치(prefix) 연산자가 되고, 피연산자가 다음에 올 경우 후치(postfix) 연산자가 된다. 만약 이러한 연산자들을 후치 연산자로 사용할 경우에는 반드시 연산자가 적용되는 표현식과 동일한 줄에 나타나야 한다. 이렇지 않으면, 줄바꿈은 무조건 세미콜론으로 해석되고 ++나 --는 줄바꿈 다음 피연산자의 전치 연산자로 해석될 것이다. 예를 들어, 아래의 코드를 살펴보자.&lt;/p&gt;
&lt;p&gt;x
++
y&lt;/p&gt;
&lt;p&gt;위 코드는 x++; y가 아니라 x; ++y로 해석된다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Express guide]]></title><description><![CDATA[Hello world 예제
기본적으로 이 앱은 여러분이 작성할 수 있는 가장 간단한 Express 앱일 것입니다. 이 앱은 하나의 파일로 된 앱이며 Express 생성기를 통해 얻게 되는 앱과는 같지 않습니다. (이 예제와 달리 Express 생성기…]]></description><link>https://nicorobinv.github.io/Express-study_1/</link><guid isPermaLink="false">https://nicorobinv.github.io/Express-study_1/</guid><pubDate>Mon, 20 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hello world 예제
기본적으로 이 앱은 여러분이 작성할 수 있는 가장 간단한 Express 앱일 것입니다. 이 앱은 하나의 파일로 된 앱이며 Express 생성기를 통해 얻게 되는 앱과는 같지 않습니다. (이 예제와 달리 Express 생성기를 통해 얻게 되는 앱은 다양한 목적을 위한 여러 JavaScript 파일, Jade 템플리트 및 하위 디렉토리를 포함하는 전체 앱에 대한 스캐폴딩을 작성합니다.)
먼저, myapp이라는 이름의 디렉토리를 작성한 후 이 디렉토리로 이동하여 npm init를 실행하십시오. 이후 설치 안내서에 따라 express를 종속 항목으로서 설치하십시오.
myapp 디렉토리에 app.js라는 이름의 파일을 작성한 후 다음과 같은 코드를 추가하십시오.&lt;/p&gt;
&lt;p&gt;var express = require(&apos;express&apos;);
var app = express();
app.get(&apos;/&apos;, function (req, res) {
res.send(&apos;Hello World!&apos;);
});
app.listen(3000, function () {
console.log(&apos;Example app listening on port 3000!&apos;);
});
앱은 서버를 시작하며 3000번 포트에서 연결을 청취합니다. 앱은 루트 URL(/) 또는 라우트에 대한 요청에 “Hello World!”로 응답합니다. 다른 모든 경로에 대해서는 404 Not Found로 응답합니다.
req(요청) 및 res(응답)는 Node가 제공하는 동일한 오브젝트이며, 따라서 req.pipe(), req.on(&apos;data&apos;, callback) 그리고 Express의 관여가 필요 없는 다른 모든 항목을 호출할 수 있습니다.
다음의 명령을 이용하여 앱을 실행하십시오.&lt;/p&gt;
&lt;p&gt;$ node app.js
이후 브라우저에서 &lt;a href=&quot;http://localhost:3000/%EC%9D%84&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://localhost:3000/을&lt;/a&gt; 로드하여 결과물을 확인하십시오.&lt;/p&gt;
&lt;p&gt;출처: &lt;a href=&quot;https://expressjs.com/ko/starter/hello-world.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://expressjs.com/ko/starter/hello-world.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Express 애플리케이션 생성기
애플리케이션의 골격을 신속하게 작성하려면 애플리케이션 생성기 도구인 express를 사용하십시오.
다음의 명령을 이용해 express를 설치하십시오.&lt;/p&gt;
&lt;p&gt;$ npm install express-generator -g
다음과 같이 -h 옵션을 이용해 명령의 옵션을 표시하십시오.&lt;/p&gt;
&lt;p&gt;$ express -h
Usage: express [options][dir]
Options:
-h, --help output usage information
--version output the version number
-e, --ejs add ejs engine support
--hbs add handlebars engine support
--pug add pug engine support
-H, --hogan add hogan.js engine support
--no-view generate without view engine
-v, --view &lt;engine&gt; add view &lt;engine&gt; support (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)
-c, --css &lt;engine&gt; add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css)
--git add .gitignore
-f, --force force on non-empty directory
예를 들면, 다음의 예에서는 &lt;em&gt;myapp&lt;/em&gt;라는 이름의 Express 앱을 현재 작업 디렉토리에 작성합니다.&lt;/p&gt;
&lt;p&gt;$ express --view=pug myapp
create : myapp
create : myapp/package.json
create : myapp/app.js
create : myapp/public
create : myapp/public/javascripts
create : myapp/public/images
create : myapp/routes
create : myapp/routes/index.js
create : myapp/routes/users.js
create : myapp/public/stylesheets
create : myapp/public/stylesheets/style.css
create : myapp/views
create : myapp/views/index.pug
create : myapp/views/layout.pug
create : myapp/views/error.pug
create : myapp/bin
create : myapp/bin/www
이후 다음과 같이 종속 항목을 설치하십시오.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;cd myapp&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8888799999999999em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; npm install
MacOS 또는 Linux에서는 다음 명령을 사용하여 앱을 실행하십시오.&lt;/p&gt;
&lt;p&gt;$ DEBUG=myapp:* npm start
Windows에서는 다음 명령을 사용하십시오.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;set DEBUG=myapp:* &amp;#x26; npm start
이후 브라우저에서 &lt;a href=&quot;http://localhost:3000/%EC%9D%84&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://localhost:3000/을&lt;/a&gt; 로드하여 앱에 액세스하십시오.
생성된 앱은 다음과 같은 디렉토리 구조를 갖습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;.
├── app.js
├── bin
│ └── www
├── package.json
├── public
│ ├── images
│ ├── javascripts
│ └── stylesheets
│ └── style.css
├── routes
│ ├── index.js
│ └── users.js
└── views
├── error.pug
├── index.pug
└── layout.pug
7 directories, 9 files
생성기에 의해 작성된 앱 구조는 Express 앱을 구조화하는 여러 방법 중 하나에 불과합니다. 이러한 구조를 사용하거나 사용자의 요구사항에 가장 적합하도록 구조를 수정하십시오.&lt;/p&gt;
&lt;p&gt;출처: &lt;a href=&quot;https://expressjs.com/ko/starter/generator.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://expressjs.com/ko/starter/generator.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;기본 라우팅
라우팅은 URI(또는 경로) 및 특정한 HTTP 요청 메소드(GET, POST 등)인 특정 엔드포인트에 대한 클라이언트 요청에 애플리케이션이 응답하는 방법을 결정하는 것을 말합니다.
각 라우트는 하나 이상의 핸들러 함수를 가질 수 있으며, 이러한 함수는 라우트가 일치할 때 실행됩니다.
라우트 정의에는 다음과 같은 구조가 필요합니다.&lt;/p&gt;
&lt;p&gt;app.METHOD(PATH, HANDLER)
여기서,
• app은 express의 인스턴스입니다.
• METHOD는 HTTP 요청 메소드입니다.
• PATH는 서버에서의 경로입니다.
• HANDLER는 라우트가 일치할 때 실행되는 함수입니다.
이 학습서에서는 app이라는 이름의 express 인스턴스가 작성되며 서버가 실행 중인 것으로 가정합니다. 앱의 작성 및 시작에 익숙하지 않은 경우에는 Hello world 예제를 참조하십시오.
다음 예에서는 간단한 라우트의 정의를 설명합니다.
홈 페이지에서 Hello World!로 응답:&lt;/p&gt;
&lt;p&gt;app.get(&apos;/&apos;, function (req, res) {
res.send(&apos;Hello World!&apos;);
});
애플리케이션의 홈 페이지인 루트 라우트(/)에서 POST 요청에 응답:&lt;/p&gt;
&lt;p&gt;app.post(&apos;/&apos;, function (req, res) {
res.send(&apos;Got a POST request&apos;);
});
/user 라우트에 대한 PUT 요청에 응답:&lt;/p&gt;
&lt;p&gt;app.put(&apos;/user&apos;, function (req, res) {
res.send(&apos;Got a PUT request at /user&apos;);
});
/user 라우트에 대한 DELETE 요청에 응답:&lt;/p&gt;
&lt;p&gt;app.delete(&apos;/user&apos;, function (req, res) {
res.send(&apos;Got a DELETE request at /user&apos;);
});
라우팅에 대한 자세한 내용을 확인하려면 라우팅 안내서를 참조하십시오.&lt;/p&gt;
&lt;p&gt;출처: &lt;a href=&quot;https://expressjs.com/ko/starter/basic-routing.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://expressjs.com/ko/starter/basic-routing.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Express에서 정적 파일 제공
이미지, CSS 파일 및 JavaScript 파일과 같은 정적 파일을 제공하려면 Express의 기본 제공 미들웨어 함수인 express.static을 사용하십시오.
정적 자산이 포함된 디렉토리의 이름을 express.static 미들웨어 함수에 전달하면 파일의 직접적인 제공을 시작할 수 있습니다. 예를 들면, 다음과 같은 코드를 이용하여 public이라는 이름의 디렉토리에 포함된 이미지, CSS 파일 및 JavaScript 파일을 제공하십시오.&lt;/p&gt;
&lt;p&gt;app.use(express.static(&apos;public&apos;));
이제 다음과 같이 public 디렉토리에 포함된 파일을 로드할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:3000/images/kitten.jpg&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://localhost:3000/images/kitten.jpg&lt;/a&gt;
&lt;a href=&quot;http://localhost:3000/css/style.css&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://localhost:3000/css/style.css&lt;/a&gt;
&lt;a href=&quot;http://localhost:3000/js/app.js&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://localhost:3000/js/app.js&lt;/a&gt;
&lt;a href=&quot;http://localhost:3000/images/bg.png&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://localhost:3000/images/bg.png&lt;/a&gt;
&lt;a href=&quot;http://localhost:3000/hello.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://localhost:3000/hello.html&lt;/a&gt;
Express는 정적 디렉토리에 대해 상대적으로 파일을 검색하며, 따라서 정적 디렉토리의 이름은 URL의 일부가 아닙니다.
여러 개의 정적 자산 디렉토리를 이용하려면 다음과 같이 express.static 미들웨어 함수를 여러 번 호출하십시오.&lt;/p&gt;
&lt;p&gt;app.use(express.static(&apos;public&apos;));
app.use(express.static(&apos;files&apos;));
Express는 express.static 미들웨어 함수를 이용해 정적 디렉토리를 설정한 순서대로 파일을 검색합니다.
express.static 함수를 통해 제공되는 파일에 대한 가상 경로 접두부(파일 시스템 내에 해당 경로가 실제로 존재하지 않는 경우)를 작성하려면, 아래에 표시된 것과 같이 정적 디렉토리에 대한 마운트 경로를 지정하십시오.&lt;/p&gt;
&lt;p&gt;app.use(&apos;/static&apos;, express.static(&apos;public&apos;));
이제 /static 경로 접두부를 통해 public 디렉토리에 포함된 파일을 로드할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:3000/static/images/kitten.jpg&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://localhost:3000/static/images/kitten.jpg&lt;/a&gt;
&lt;a href=&quot;http://localhost:3000/static/css/style.css&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://localhost:3000/static/css/style.css&lt;/a&gt;
&lt;a href=&quot;http://localhost:3000/static/js/app.js&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://localhost:3000/static/js/app.js&lt;/a&gt;
&lt;a href=&quot;http://localhost:3000/static/images/bg.png&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://localhost:3000/static/images/bg.png&lt;/a&gt;
&lt;a href=&quot;http://localhost:3000/static/hello.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://localhost:3000/static/hello.html&lt;/a&gt;
그러나 express.static 함수에 제공되는 경로는 node 프로세스가 실행되는 디렉토리에 대해 상대적입니다. Express 앱을 다른 디렉토리에서 실행하는 경우에는 다음과 같이 제공하기 원하는 디렉토리의 절대 경로를 사용하는 것이 더 안전합니다.&lt;/p&gt;
&lt;p&gt;app.use(&apos;/static&apos;, express.static(__dirname + &apos;/public&apos;));&lt;/p&gt;
&lt;p&gt;출처: &lt;a href=&quot;https://expressjs.com/ko/starter/static-files.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://expressjs.com/ko/starter/static-files.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;라우팅
라우팅은 애플리케이션 엔드 포인트(URI)의 정의, 그리고 URI가 클라이언트 요청에 응답하는 방식을 말합니다. 라우팅에 대한 소개는 기본 라우팅을 참조하십시오.
다음 코드는 매우 기본적인 라우트의 예입니다.&lt;/p&gt;
&lt;p&gt;var express = require(&apos;express&apos;);
var app = express();
// respond with &quot;hello world&quot; when a GET request is made to the homepage
app.get(&apos;/&apos;, function(req, res) {
res.send(&apos;hello world&apos;);
});
라우트 메소드
라우트 메소드는 HTTP 메소드 중 하나로부터 파생되며, express 클래스의 인스턴스에 연결됩니다.
다음 코드는 앱의 루트에 대한 GET 및 POST 메소드에 대해 정의된 라우트의 예입니다.&lt;/p&gt;
&lt;p&gt;// GET method route
app.get(&apos;/&apos;, function (req, res) {
res.send(&apos;GET request to the homepage&apos;);
});
// POST method route
app.post(&apos;/&apos;, function (req, res) {
res.send(&apos;POST request to the homepage&apos;);
});
Express는 HTTP 메소드에 해당하는 다음과 같은 라우팅 메소드를 지원합니다. get, post, put, head, delete, options, trace, copy, lock, mkcol, move, purge, propfind, proppatch, unlock, report, mkactivity, checkout, merge, m-search, notify, subscribe, unsubscribe, patch, search 및 connect.
올바르지 않은 JavaScript 변수 이름으로 변환되는 메소드를 라우팅하려면 대괄호 표기법을 사용하십시오. 예를 들면 app[&apos;m-search&apos;](&apos;/&apos;, function ... 등과 같습니다.
특수한 라우팅 메소드인 app.all()은 어떠한 HTTP 메소드로부터도 파생되지 않습니다. 이 메소드는 모든 요청 메소드에 대해 한 경로에서 미들웨어 함수를 로드하는 데 사용됩니다.
다음 예에서는, GET, POST, PUT 또는 DELETE 메소드를 사용하는 경우, 또는 http 모듈에서 지원되는 기타 모든 HTTP 요청 메소드를 사용하는 경우 등의 “/secret”에 대한 요청을 위하여 핸들러가 실행됩니다.&lt;/p&gt;
&lt;p&gt;app.all(&apos;/secret&apos;, function (req, res, next) {
console.log(&apos;Accessing the secret section ...&apos;);
next(); // pass control to the next handler
});
라우트 경로
라우트 경로는, 요청 메소드와의 조합을 통해, 요청이 이루어질 수 있는 엔드포인트를 정의합니다. 라우트 경로는 문자열, 문자열 패턴 또는 정규식일 수 있습니다.
Express는 라우트 경로의 일치를 위해 path-to-regexp를 사용합니다. 라우트 경로를 정의할 수 있는 모든 가능성을 확인하려면 path-to-regexp 문서를 참조하십시오. Express Route Tester는 기본적인 Express 라우트의 테스트를 위한 편리한 도구이지만, 패턴 일치는 지원하지 않습니다.
조회 문자열은 라우트 경로의 일부가 아닙니다.
문자열을 기반으로 하는 라우트 경로의 몇 가지 예는 다음과 같습니다.
다음의 라우트 경로는 요청을 루트 라우트 /에 일치시킵니다.&lt;/p&gt;
&lt;p&gt;app.get(&apos;/&apos;, function (req, res) {
res.send(&apos;root&apos;);
});
다음의 라우트 경로는 요청을 /about에 일치시킵니다.&lt;/p&gt;
&lt;p&gt;app.get(&apos;/about&apos;, function (req, res) {
res.send(&apos;about&apos;);
});
다음의 라우트 경로는 요청을 /random.text에 일치시킵니다.&lt;/p&gt;
&lt;p&gt;app.get(&apos;/random.text&apos;, function (req, res) {
res.send(&apos;random.text&apos;);
});
문자열 패턴을 기반으로 하는 라우트 경로의 몇 가지 예는 다음과 같습니다.
다음의 라우트 경로는 acd 및 abcd와 일치합니다.&lt;/p&gt;
&lt;p&gt;app.get(&apos;/ab?cd&apos;, function(req, res) {
res.send(&apos;ab?cd&apos;);
});
다음의 라우트 경로는 abcd, abbcd 및 abbbcd 등과 일치합니다.&lt;/p&gt;
&lt;p&gt;app.get(&apos;/ab+cd&apos;, function(req, res) {
res.send(&apos;ab+cd&apos;);
});
다음의 라우트 경로는 abcd, abxcd, abRABDOMcd 및 ab123cd 등과 일치합니다.&lt;/p&gt;
&lt;p&gt;app.get(&apos;/ab&lt;em&gt;cd&apos;, function(req, res) {
res.send(&apos;ab&lt;/em&gt;cd&apos;);
});
다음의 라우트 경로는 /abe 및 /abcde와 일치합니다.&lt;/p&gt;
&lt;p&gt;app.get(&apos;/ab(cd)?e&apos;, function(req, res) {
res.send(&apos;ab(cd)?e&apos;);
});
?, +, * 및 () 문자는 정규식 문자의 서브세트입니다. 하이픈(-) 및 점(.)은 문자열 기반 경로에 의해 문자 그대로 해석됩니다.
정규식을 기반으로 하는 라우트 경로의 예:
다음의 라우트 경로는 라우트 이름에 “a”가 포함된 모든 항목과 일치합니다.&lt;/p&gt;
&lt;p&gt;app.get(/a/, function(req, res) {
res.send(&apos;/a/&apos;);
});
다음의 라우트 경로는 butterfly 및 dragonfly와 일치하지만, butterflyman 및 dragonfly man 등과 일치하지 않습니다.&lt;/p&gt;
&lt;p&gt;app.get(/.&lt;em&gt;fly$/, function(req, res) {
res.send(&apos;/.&lt;/em&gt;fly$/&apos;);
});
라우트 핸들러
미들웨어와 비슷하게 작동하는 여러 콜백 함수를 제공하여 요청을 처리할 수 있습니다. 유일한 차이점은 이러한 콜백은 next(&apos;route&apos;)를 호출하여 나머지 라우트 콜백을 우회할 수도 있다는 점입니다. 이러한 메커니즘을 이용하면 라우트에 대한 사전 조건을 지정한 후, 현재의 라우트를 계속할 이유가 없는 경우에는 제어를 후속 라우트에 전달할 수 있습니다.
다음 예에 나타난 것과 같이, 라우트 핸들러는 함수나 함수 배열의 형태 또는 둘을 조합한 형태일 수 있습니다.
하나의 콜백 함수는 하나의 라우트를 처리할 수 있습니다. 예를 들면 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;app.get(&apos;/example/a&apos;, function (req, res) {
res.send(&apos;Hello from A!&apos;);
});
2개 이상의 콜백 함수는 하나의 라우트를 처리할 수 있습니다(next 오브젝트를 반드시 지정해야 함). 예를 들면 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;app.get(&apos;/example/b&apos;, function (req, res, next) {
console.log(&apos;the response will be sent by the next function ...&apos;);
next();
}, function (req, res) {
res.send(&apos;Hello from B!&apos;);
});
하나의 콜백 함수 배열은 하나의 라우트를 처리할 수 있습니다. 예를 들면 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;var cb0 = function (req, res, next) {
console.log(&apos;CB0&apos;);
next();
}
var cb1 = function (req, res, next) {
console.log(&apos;CB1&apos;);
next();
}
var cb2 = function (req, res) {
res.send(&apos;Hello from C!&apos;);
}
app.get(&apos;/example/c&apos;, [cb0, cb1, cb2]);
독립적인 함수와 함수 배열의 조합은 하나의 라우트를 처리할 수 있습니다. 예를 들면 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;var cb0 = function (req, res, next) {
console.log(&apos;CB0&apos;);
next();
}
var cb1 = function (req, res, next) {
console.log(&apos;CB1&apos;);
next();
}
app.get(&apos;/example/d&apos;, [cb0, cb1], function (req, res, next) {
console.log(&apos;the response will be sent by the next function ...&apos;);
next();
}, function (req, res) {
res.send(&apos;Hello from D!&apos;);
});
응답 메소드
다음 표에 표시된 응답 오브젝트에 대한 메소드(res)는 응답을 클라이언트로 전송하고 요청-응답 주기를 종료할 수 있습니다. 라우트 핸들러로부터 다음 메소드 중 어느 하나도 호출되지 않는 경우, 클라이언트 요청은 정지된 채로 방치됩니다.
메소드 설명
res.download() 파일이 다운로드되도록 프롬프트합니다.
res.end() 응답 프로세스를 종료합니다.
res.json() JSON 응답을 전송합니다.
res.jsonp() JSONP 지원을 통해 JSON 응답을 전송합니다.
res.redirect() 요청의 경로를 재지정합니다.
res.render() 보기 템플리트를 렌더링합니다.
res.send() 다양한 유형의 응답을 전송합니다.
res.sendFile 파일을 옥텟 스트림의 형태로 전송합니다.
res.sendStatus() 응답 상태 코드를 설정한 후 해당 코드를 문자열로 표현한 내용을 응답 본문으로서 전송합니다.
app.route()
app.route()를 이용하면 라우트 경로에 대하여 체인 가능한 라우트 핸들러를 작성할 수 있습니다. 경로는 한 곳에 지정되어 있으므로, 모듈식 라우트를 작성하면 중복성과 오타가 감소하여 도움이 됩니다. 라우트에 대한 자세한 정보는 Router() 문서를 참조하십시오.
app.route()를 사용하여 정의된 체인 라우트 핸들러의 예는 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;app.route(&apos;/book&apos;)
.get(function(req, res) {
res.send(&apos;Get a random book&apos;);
})
.post(function(req, res) {
res.send(&apos;Add a book&apos;);
})
.put(function(req, res) {
res.send(&apos;Update the book&apos;);
});
express.Router
express.Router 클래스를 사용하면 모듈식 마운팅 가능한 핸들러를 작성할 수 있습니다. Router 인스턴스는 완전한 미들웨어이자 라우팅 시스템이며, 따라서 “미니 앱(mini-app)”이라고 불리는 경우가 많습니다.
다음 예에서는 라우터를 모듈로서 작성하고, 라우터 모듈에서 미들웨어 함수를 로드하고, 몇몇 라우트를 정의하고, 기본 앱의 한 경로에 라우터 모듈을 마운트합니다.
다음의 내용이 입력된 birds.js라는 이름의 라우터 파일을 앱 디렉토리에 작성하십시오.&lt;/p&gt;
&lt;p&gt;var express = require(&apos;express&apos;);
var router = express.Router();
// middleware that is specific to this router
router.use(function timeLog(req, res, next) {
console.log(&apos;Time: &apos;, Date.now());
next();
});
// define the home page route
router.get(&apos;/&apos;, function(req, res) {
res.send(&apos;Birds home page&apos;);
});
// define the about route
router.get(&apos;/about&apos;, function(req, res) {
res.send(&apos;About birds&apos;);
});
module.exports = router;
이후 앱 내에서 다음과 같이 라우터 모듈을 로드하십시오.&lt;/p&gt;
&lt;p&gt;var birds = require(&apos;./birds&apos;);
...
app.use(&apos;/birds&apos;, birds);
앱은 이제 /birds 및 /birds/about에 대한 요청을 처리할 수 있게 되었으며, 해당 라우트에 대한 특정한 미들웨어 함수인 timeLog를 호출할 것입니다.&lt;/p&gt;
&lt;p&gt;출처: &lt;a href=&quot;https://expressjs.com/ko/guide/routing.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://expressjs.com/ko/guide/routing.html&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React 배포하기]]></title><description><![CDATA[명령어 복습하기 프로젝트 생성하기
npm init react-app .
터미널에서 원하는 디렉토리에 들어가서 npm init react-app .를 입력하면 현재 디렉토리에 리액트 프로젝트를 생성합니다. 개발 모드 실행하기
npm start (npm…]]></description><link>https://nicorobinv.github.io/React-study_6/</link><guid isPermaLink="false">https://nicorobinv.github.io/React-study_6/</guid><pubDate>Wed, 01 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;명령어 복습하기&lt;/p&gt;
&lt;p&gt;프로젝트 생성하기
npm init react-app .
터미널에서 원하는 디렉토리에 들어가서 npm init react-app .를 입력하면 현재 디렉토리에 리액트 프로젝트를 생성합니다.&lt;/p&gt;
&lt;p&gt;개발 모드 실행하기
npm start (npm run start)
터미널에서 npm run start를 입력하면 개발 모드 서버가 실행됩니다.&lt;/p&gt;
&lt;p&gt;실행 중인 서버 종료하기
ctrl + c
서버가 실행 중인 터미널에서 ctrl + c를 입력하면 서버가 종료됩니다.&lt;/p&gt;
&lt;p&gt;개발된 프로젝트 빌드하기
npm run build
터미널에서 npm run build를 입력하면 빌드를 시작합니다.&lt;/p&gt;
&lt;p&gt;빌드한 것 로컬에서 실행하기
npx serve build
터미널에서 npx serve build를 입력하면 serve 프로그램을 다운 받고 build 폴더에서 서버가 실행됩니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React 디자인 적용하는 방법과 팁]]></title><description><![CDATA[사실 CSS 파일을 불러오거나 이미지 파일을 불러오는 기능은 리액트 고유의 기능이 아니라 Create React App이라는 프로그램이 대신 설정해 준 기능입니다. (참고: Create React App 문서) 클래스네임을 좀 더 편리하게 쓰는 방법…]]></description><link>https://nicorobinv.github.io/React-study_5/</link><guid isPermaLink="false">https://nicorobinv.github.io/React-study_5/</guid><pubDate>Tue, 24 Aug 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;사실 CSS 파일을 불러오거나 이미지 파일을 불러오는 기능은 리액트 고유의 기능이 아니라 Create React App이라는 프로그램이 대신 설정해 준 기능입니다. (참고: Create React App 문서)&lt;/p&gt;
&lt;p&gt;클래스네임을 좀 더 편리하게 쓰는 방법&lt;/p&gt;
&lt;p&gt;디자인을 적용하는 방법
이미지 불러오기
이미지 파일은 import 구문을 통해 불러오고, 불러온 이미지 주소를 src 속성으로 사용하면 됩니다.&lt;/p&gt;
&lt;p&gt;import diceImg from &apos;./assets/dice.png&apos;;&lt;/p&gt;
&lt;p&gt;function Dice() {
return &lt;img src={diceImg} alt=&quot;주사위 이미지&quot; /&gt;;
}&lt;/p&gt;
&lt;p&gt;export default App;
인라인 스타일
리액트에서 인라인 스타일은 문자열이 아닌 객체형으로 사용합니다. 프로퍼티 이름은 CSS 속성 이름으로, 프로퍼티 값은 CSS 속성 값으로 쓰는데요, 이때 프로퍼티 이름은 아래의 boarderRadius 처럼 대시 기호 없이 카멜 케이스로 써야 한다는 점도 꼭 기억해두세요.&lt;/p&gt;
&lt;p&gt;import diceImg from &apos;./assets/dice.png&apos;;&lt;/p&gt;
&lt;p&gt;const style = {
borderRadius: &apos;50%&apos;,
width: &apos;120px&apos;,
height: &apos;120px&apos;,
};&lt;/p&gt;
&lt;p&gt;function Dice() {
return &lt;img style={style} src={diceImg} alt=&quot;주사위 이미지&quot; /&gt;;
}&lt;/p&gt;
&lt;p&gt;export default App;
CSS 파일 불러오기
import 구문으로 파일을 불러올 수 있는데요, 이때 from 키워드 없이 쓰면 됩니다.&lt;/p&gt;
&lt;p&gt;import diceImg from &apos;./assets/dice.png&apos;;
import &apos;./Dice.css&apos;;&lt;/p&gt;
&lt;p&gt;function Dice() {
return &lt;img src={diceImg} alt=&quot;주사위 이미지&quot; /&gt;;
}&lt;/p&gt;
&lt;p&gt;export default App;
클래스네임 사용하기
CSS 파일에 정의된 클래스명을 className prop에 문자열로 넣어주면 됩니다. 이때 재사용성을 위해 className prop을 부모 컴포넌트에서 받으면 더 좋습니다.&lt;/p&gt;
&lt;p&gt;import diceImg from &apos;./assets/dice.png&apos;;
import &apos;./Dice.css&apos;;&lt;/p&gt;
&lt;p&gt;function Dice({ className = &apos;&apos; }) {
const classNames = &lt;code class=&quot;language-text&quot;&gt;Dice ${className}&lt;/code&gt;;
return &lt;img className={classNames} src={diceImg} alt=&quot;주사위 이미지&quot; /&gt;;
}&lt;/p&gt;
&lt;p&gt;export default App;
편리하게 클래스네임을 쓰는 방법
앞에서는 여러 className을 템플릿 문자열로 합쳐서 사용했습니다. 몇 개 없을 때는 상관없지만, 개수가 늘어날수록 아래처럼 알아보기 힘들어진다는 문제점이 있는데요.&lt;/p&gt;
&lt;p&gt;템플릿 문자열을 사용한 예
function Button({ isPending, color, size, invert, children }) {
const classNames = &lt;code class=&quot;language-text&quot;&gt;Button ${isPending ? &amp;#39;pending&amp;#39; : &amp;#39;&amp;#39;} ${color} ${size} ${invert ? &amp;#39;invert&amp;#39; : &amp;#39;&amp;#39;}&lt;/code&gt;;
return &lt;button className={classNames}&gt;{children}&lt;/button&gt;;
}&lt;/p&gt;
&lt;p&gt;export default Button;
배열을 사용한 예
function Button({ isPending, color, size, invert, children }) {
const classNames = [
&apos;Button&apos;,
isPending ? &apos;pending&apos; : &apos;&apos;,
color,
size,
invert ? &apos;invert&apos; : &apos;&apos;,
].join(&apos;&apos;);
return &lt;button className={classNames}&gt;{children}&lt;/button&gt;;
}&lt;/p&gt;
&lt;p&gt;export default Button;
위 예시 코드처럼 지저분하게 느껴지고, 매번 반복되는 코드를 작성한다는 번거로움이 있습니다. 개발자들은 이럴 때 라이브러리라는 걸 쓰는데요, 다른 개발자가 미리 만들어 놓은 코드를 이용해서 편하게 개발하는 겁니다.&lt;/p&gt;
&lt;p&gt;클래스네임의 경우에도 편리하게 사용할 수 있는 라이브러리가 많이 있는데요, 그중에서도 이번에 소개할 라이브러리는 바로 classnames라는 라이브러리입니다. 아래 예시 코드를 보시면 아시겠지만, 클래스네임에만 집중할 수 있어 훨씬 읽기 편해집니다. 이렇게 적절한 라이브러리를 쓰면 개발 생산성이 굉장히 좋아지죠.&lt;/p&gt;
&lt;p&gt;classnames 라이브러리를 사용한 예
import classNames from &apos;classnames&apos;;&lt;/p&gt;
&lt;p&gt;function Button({ isPending, color, size, invert, children }) {
return (
&amp;#x3C;button
className={classNames(
&apos;Button&apos;,
isPending &amp;#x26;&amp;#x26; &apos;pending&apos;,
color,
size,
invert &amp;#x26;&amp;#x26; &apos;invert&apos;,
)}&gt;
{ children }
&lt;/button &gt;
);
}&lt;/p&gt;
&lt;p&gt;export default Button;
classnames 은 NPM이라는 프로그램을 통해 설치할 수 있습니다. 터미널에서 npm install classnames 을 입력하고 설치한 다음에, 위 예시처럼 import 로 불러와서 사용하면 됩니다. NPM 저장소 사이트로 들어가면 사용 방법과 설명이 나와있음.&lt;/p&gt;
&lt;p&gt;NPM classnames 패키지: &lt;a href=&quot;https://www.npmjs.com/package/classnames&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.npmjs.com/package/classnames&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React state 정리하기]]></title><description><![CDATA[State
state는 리액트에서 화면을 그려내는 데 굉장히 중요한 역할을 합니다. State라는 단어는 한국어로 '상태'라는 뜻이 있는데요. 리액트에서의 state도 그 의미가 다르지 않습니다. 상태가 바뀔 때마다 화면을 새롭게 그려내는 방식으로 …]]></description><link>https://nicorobinv.github.io/React-study_4/</link><guid isPermaLink="false">https://nicorobinv.github.io/React-study_4/</guid><pubDate>Mon, 23 Aug 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;State
state는 리액트에서 화면을 그려내는 데 굉장히 중요한 역할을 합니다.&lt;/p&gt;
&lt;p&gt;State라는 단어는 한국어로 &apos;상태&apos;라는 뜻이 있는데요. 리액트에서의 state도 그 의미가 다르지 않습니다.&lt;/p&gt;
&lt;p&gt;상태가 바뀔 때마다 화면을 새롭게 그려내는 방식으로 동작을 하는 것이죠.&lt;/p&gt;
&lt;p&gt;리액트에서 state를 만들고, state를 바꾸기 위해서는 일단 useState라는 함수를 활용해야 합니다.&lt;/p&gt;
&lt;p&gt;import { useState } from &apos;react&apos;;&lt;/p&gt;
&lt;p&gt;// ...&lt;/p&gt;
&lt;p&gt;const [num, setNum] = useState(1);&lt;/p&gt;
&lt;p&gt;// ...
보통 이렇게 Destructuring 문법으로 작성하는데요. useState 함수가 초깃값을 아규먼트로 받고 그에 따른 실행 결과로 요소 2개를 가진 배열의 형태로 리턴을 하기 때문입니다.&lt;/p&gt;
&lt;p&gt;이때 첫 번째 요소가 바로 state이고, 두 번째 요소가 이 state를 바꾸는 setter 함수인데요.&lt;/p&gt;
&lt;p&gt;참고로 위 코드에서도 볼 수 있듯 첫 번째 변수는 원하는 state의 이름(num)을 지어주고, 두 번째 변수에는 state 이름 앞에 set을 붙인 다음 카멜 케이스로 이름을 지어주는 것(setNum)이 일반적입니다.&lt;/p&gt;
&lt;p&gt;state는 변수에 새로운 값을 할당하는 방식으로 변경하는 것이 아니라 이 setter 함수를 활용해야 하는데요. setter 함수는 호출할 때 전달하는 아규먼트 값으로 state 값을 변경해 줍니다.&lt;/p&gt;
&lt;p&gt;그래서 아래 코드처럼 setter 함수를 활용해서 이벤트 핸들러를 등록해두면, 이벤트가 발생할 때마다 상태가 변하면서 화면이 새로 그려지는 것이죠!&lt;/p&gt;
&lt;p&gt;import { useState } from &apos;react&apos;;
import Button from &apos;./Button&apos;;
import Dice from &apos;./Dice&apos;;&lt;/p&gt;
&lt;p&gt;function App() {
const [num, setNum] = useState(1);&lt;/p&gt;
&lt;p&gt;const handleRollClick = () =&gt; {
setNum(3); // num state를 3으로 변경!
};&lt;/p&gt;
&lt;p&gt;const handleClearClick = () =&gt; {
setNum(1); // num state를 1로 변경!
};&lt;/p&gt;
&lt;p&gt;return (&lt;/p&gt;
&lt;div&gt;
&lt;Button onClick={handleRollClick}&gt;던지기&lt;/Button&gt;
&lt;Button onClick={handleClearClick}&gt;처음부터&lt;/Button&gt;
&lt;Dice color=&quot;red&quot; num={num} /&gt;
&lt;/div&gt;
);
}
&lt;p&gt;export default App;
참조형 State
자바스크립트의 자료형은 크게 기본형(Primitive type)과 참조형(Reference type)로 나눌 수 있다는 사실, 모두 알고 계시죠?&lt;/p&gt;
&lt;p&gt;특히 참조형 값들은 조금 독특한 특성을 가지고 있어서 변수로 다룰 때도 조금 주의해야 할 부분들이 있었는데요. state를 활용할 때도 마찬가지입니다!&lt;/p&gt;
&lt;p&gt;// ...&lt;/p&gt;
&lt;p&gt;const [gameHistory, setGameHistory] = useState([]);&lt;/p&gt;
&lt;p&gt;const handleRollClick = () =&gt; {
const nextNum = random(6);
gameHistory.push(nextNum);
setGameHistory(gameHistory); // state가 제대로 변경되지 않는다!
};&lt;/p&gt;
&lt;p&gt;// ...
위 코드에서 볼 수 있듯 배열 값을 가진 gameHistory에 push 메소드를 이용해서 배열의 값을 변경한 다음, 변경된 배열을 setter 함수로 state를 변경하려고 하면 코드가 제대로 동작하지 않습니다.&lt;/p&gt;
&lt;p&gt;gameHistory state는 배열 값 자체를 가지고 있는 게 아니라 그 배열의 주솟값을 참조하고 있는 건데요. 때문에 push 메소드로 배열 안에 요소를 변경했다고 하더라도 결과적으로 참조하는 배열의 주솟값은 변경된 것이 아니게 됩니다.&lt;/p&gt;
&lt;p&gt;결과적으로 리액트 입장에서는 gameHistory state가 참조하는 주솟값은 여전히 똑같기 때문에 상태(state)가 바뀌었다고 판단하지 않는 것이죠!&lt;/p&gt;
&lt;p&gt;그래서 참조형 state를 활용할 때는 반드시 새로운 참조형 값을 만들어 state를 변경해야 합니다.&lt;/p&gt;
&lt;p&gt;가장 간단한 방법은 Spread 문법(...) 을 활용하는 것이겠죠?&lt;/p&gt;
&lt;p&gt;// ...&lt;/p&gt;
&lt;p&gt;const [gameHistory, setGameHistory] = useState([]);&lt;/p&gt;
&lt;p&gt;const handleRollClick = () =&gt; {
const nextNum = random(6);
setGameHistory([...gameHistory, nextNum]); // state가 제대로 변경된다!
};&lt;/p&gt;
&lt;p&gt;// ...
이 참조형 state의 특성을 이해하지 못하면, 간혹 state가 제대로 변경되지 않는 버그가 발생했을 때 원인을 제대로 찾지 못하는 경우가 발생할 수도 있는데요.&lt;/p&gt;
&lt;p&gt;참조형 state를 활용할 땐 반드시 새로운 참조형 값을 만들어서 state를 변경해야 한다는 점.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Props 문법]]></title><description><![CDATA[JSX 문법에서 컴포넌트를 작성할 때 컴포넌트에도 속성을 지정할 수 있는데요. 리액트에서 이렇게 컴포넌트에 지정한 속성들을 Props라고 부릅니다. Props는 Properties의 약자인데요. 컴포넌트에 속성을 지정해주면 각 속성이 하나의 객체로 …]]></description><link>https://nicorobinv.github.io/React-study_3/</link><guid isPermaLink="false">https://nicorobinv.github.io/React-study_3/</guid><pubDate>Sun, 22 Aug 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;JSX 문법에서 컴포넌트를 작성할 때 컴포넌트에도 속성을 지정할 수 있는데요. 리액트에서 이렇게 컴포넌트에 지정한 속성들을 Props라고 부릅니다.&lt;/p&gt;
&lt;p&gt;Props는 Properties의 약자인데요. 컴포넌트에 속성을 지정해주면 각 속성이 하나의 객체로 모여서 컴포넌트를 정의한 함수의 첫 번째 파라미터로 전달됩니다.&lt;/p&gt;
&lt;p&gt;App.js&lt;/p&gt;
&lt;p&gt;import Dice from &apos;./Dice&apos;;&lt;/p&gt;
&lt;p&gt;function App() {
return (&lt;/p&gt;
&lt;div&gt;
&lt;Dice color=&quot;blue&quot; /&gt;
&lt;/div&gt;
);
}
&lt;p&gt;export default App;
Dice.js&lt;/p&gt;
&lt;p&gt;import diceBlue01 from &apos;./assets/dice-blue-1.svg&apos;;&lt;/p&gt;
&lt;p&gt;function Dice(props) {
console.log(props)
return &lt;img src={diceBlue01} alt=&quot;주사위&quot; /&gt;;
}&lt;/p&gt;
&lt;p&gt;export default Dice;
위 코드들 처럼 App 함수에서 사용하는 Dice 컴포넌트에 color라는 속성을 blue로 지정해주고, Dice 함수 내부에서 props라는 파라미터를 하나 만들어 출력해보면 브라우저 콘솔에는 다음과 같은 출력 결과가 나타나게 됩니다.&lt;/p&gt;
&lt;p&gt;{ color: &quot;blue&quot; }
그래서 컴포넌트를 활용할 때 속성값을 다양하게 전달하고 이 props 값을 활용하면, 똑같은 컴포넌트라도 전달된 속성값에 따라 서로 다른 모습을 그려낼 수도 있게 됩니다.&lt;/p&gt;
&lt;p&gt;App.js&lt;/p&gt;
&lt;p&gt;import Dice from &apos;./Dice&apos;;&lt;/p&gt;
&lt;p&gt;function App() {
return (&lt;/p&gt;
&lt;div&gt;
&lt;Dice color=&quot;red&quot; num={2} /&gt;
&lt;/div&gt;
);
}
&lt;p&gt;export default App;
Dice.js&lt;/p&gt;
&lt;p&gt;import diceBlue01 from &apos;./assets/dice-blue-1.svg&apos;;
import diceBlue02 from &apos;./assets/dice-blue-2.svg&apos;;
// ...
import diceRed01 from &apos;./assets/dice-red-1.svg&apos;;
import diceRed02 from &apos;./assets/dice-red-2.svg&apos;;
// ...&lt;/p&gt;
&lt;p&gt;const DICE_IMAGES = {
blue: [diceBlue01, diceBlue02],
red: [diceRed01, diceRed02],
};&lt;/p&gt;
&lt;p&gt;function Dice(props) {
const src = DICE_IMAGES[props.color][props.num - 1];
const alt = &lt;code class=&quot;language-text&quot;&gt;${props.color} ${props.num}&lt;/code&gt;;
return &lt;img src={src} alt={alt} /&gt;;
}&lt;/p&gt;
&lt;p&gt;export default Dice;
참고로, 이렇게 props가 객체 형태를 띠고 있으니 Destructuring 문법을 활용해서 조금 더 간결하게 코드를 작성할 수도 있겠죠?&lt;/p&gt;
&lt;p&gt;import diceBlue01 from &apos;./assets/dice-blue-1.svg&apos;;
import diceBlue02 from &apos;./assets/dice-blue-2.svg&apos;;
// ...
import diceRed01 from &apos;./assets/dice-red-1.svg&apos;;
import diceRed02 from &apos;./assets/dice-red-2.svg&apos;;
// ...&lt;/p&gt;
&lt;p&gt;const DICE_IMAGES = {
blue: [diceBlue01, diceBlue02],
red: [diceRed01, diceRed02],
};&lt;/p&gt;
&lt;p&gt;function Dice({ color = &apos;blue&apos;, num = 1 }) {
const src = DICE_IMAGES[color][num - 1];
const alt = &lt;code class=&quot;language-text&quot;&gt;${color} ${num}&lt;/code&gt;;
return &lt;img src={src} alt={alt} /&gt;;
}&lt;/p&gt;
&lt;p&gt;export default Dice;
Children
props에는 children이라는 조금 특별한 프로퍼티(prop, 프롭)가 있습니다.&lt;/p&gt;
&lt;p&gt;JSX 문법으로 컴포넌트를 작성할 때 컴포넌트를 단일 태그가 아니라 여는 태그와 닫는 태그의 형태로 작성하면, 그 안에 작성된 코드가 바로 이 children 값에 담기게 됩니다.&lt;/p&gt;
&lt;p&gt;Button.js&lt;/p&gt;
&lt;p&gt;function Button({ children }) {
return &lt;button&gt;{children}&lt;/button&gt;;
}&lt;/p&gt;
&lt;p&gt;export default Button;
App.js&lt;/p&gt;
&lt;p&gt;import Button from &apos;./Button&apos;;
import Dice from &apos;./Dice&apos;;&lt;/p&gt;
&lt;p&gt;function App() {
return (&lt;/p&gt;
&lt;div&gt;
&lt;div&gt;
&lt;Button&gt;던지기&lt;/Button&gt;
&lt;Button&gt;처음부터&lt;/Button&gt;
&lt;/div&gt;
&lt;Dice color=&quot;red&quot; num={2} /&gt;
&lt;/div&gt;
);
}
&lt;p&gt;export default App;
그래서 JSX 문법으로 컴포넌트를 작성할 때 어떤 정보를 전달할 때는 일반적인 props의 속성값을 주로 활용하고, 화면에 보여질 모습을 조금 더 직관적인 코드로 작성하고자 할 때 children 값을 활용할 수가 있습니다.&lt;/p&gt;
&lt;p&gt;참고로 이 children을 활용하면 단순히 텍스트만 작성하는 걸 넘어서 컴포넌트 안에 컴포넌트를 작성할 수도 있고, 컴포넌트 안에 복잡한 태그들을 더 작성할 수도 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React commponent 문법]]></title><description><![CDATA[리액트 엘리먼트
JSX 문법으로 작성한 요소는 결과적으로 자바스크립트 객체가 됩니다. import ReactDOM from 'react-dom'; const element = 안녕 리액트!;
console.log(element);
ReactDOM.r…]]></description><link>https://nicorobinv.github.io/React-study_2/</link><guid isPermaLink="false">https://nicorobinv.github.io/React-study_2/</guid><pubDate>Sat, 21 Aug 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;리액트 엘리먼트
JSX 문법으로 작성한 요소는 결과적으로 자바스크립트 객체가 됩니다.&lt;/p&gt;
&lt;p&gt;import ReactDOM from &apos;react-dom&apos;;&lt;/p&gt;
&lt;p&gt;const element = &lt;h1&gt;안녕 리액트!&lt;/h1&gt;;
console.log(element);
ReactDOM.render(element, document.getElementById(&apos;root&apos;));
{$$typeof: Symbol(react.element), type: &quot;h1&quot;, key: null, ref: null, props: {…}, …}
이런 객체를 리액트 엘리먼트라고 부르는데요.&lt;/p&gt;
&lt;p&gt;이 리액트 엘리먼트를 ReactDOM.render 함수의 아규먼트로 전달하게 되면, 리액트가 객체 형태의 값을 해석해서 HTML 형태로 브라우저에 띄워주는 것이죠.&lt;/p&gt;
&lt;p&gt;리액트 엘리먼트는 리액트로 화면을 그려내는데 가장 기본적인 요소입니다.&lt;/p&gt;
&lt;p&gt;리액트 컴포넌트
리액트 컴포넌트는 리액트 엘리먼트를 조금 더 자유롭게 다루기 위한 하나의 문법입니다.&lt;/p&gt;
&lt;p&gt;컴포넌트를 만드는 가장 간단한 방법은 자바스크립트의 함수를 활용하는 건데요.
아래 코드에서 JSX 문법으로 작성된 하나의 요소를 리턴하는 Hello 함수가 바로 하나의 컴포넌트입니다.&lt;/p&gt;
&lt;p&gt;이렇게 요소를 컴포넌트로 작성하게 되면 다양한 장점들이 있는데,
자세한 내용은 이후의 개념들을 하나씩 배워나가면서 차차 알아보도록 합시다!&lt;/p&gt;
&lt;p&gt;import ReactDOM from &apos;react-dom&apos;;&lt;/p&gt;
&lt;p&gt;function Hello() {
return &lt;h1&gt;안녕 리액트&lt;/h1&gt;;
}&lt;/p&gt;
&lt;p&gt;const element = (
&amp;#x3C;&gt;
&lt;Hello /&gt;
&lt;Hello /&gt;
&lt;Hello /&gt;
&amp;#x3C;/&gt;
);&lt;/p&gt;
&lt;p&gt;ReactDOM.render(element, document.getElementById(&apos;root&apos;));
그리고 이렇게 컴포넌트를 작성하면,
위 코드에서 element 변수 안의 JSX 코드에서 볼 수 있듯 컴포넌트 함수 이름을 통해 하나의 태그처럼 활용할 수가 있습니다.&lt;/p&gt;
&lt;p&gt;이런 특성을 모듈 문법으로 활용하면 훨씬 더 독립적으로 컴포넌트 특성에 집중해서 코드를 작성할 수가 있습니다.&lt;/p&gt;
&lt;p&gt;예시: Dice.js&lt;/p&gt;
&lt;p&gt;import diceBlue01 from &apos;./assets/dice-blue-1.svg&apos;;&lt;/p&gt;
&lt;p&gt;function Dice() {
return &lt;img src={diceBlue01} alt=&quot;주사위&quot; /&gt;;
}&lt;/p&gt;
&lt;p&gt;export default Dice;
예시: App.js&lt;/p&gt;
&lt;p&gt;import Dice from &apos;./Dice&apos;;&lt;/p&gt;
&lt;p&gt;function App() {
return (&lt;/p&gt;
&lt;div&gt;
&lt;Dice /&gt;
&lt;/div&gt;
);
}
&lt;p&gt;export default App;
한 가지 주의해야 할 부분은, 리액트 컴포넌트의 이름은 반드시 첫 글자를 대문자로 작성해야 한다는 것입니다.
컴포넌트 이름의 첫 글자가 소문자라면 오류가 발생하니깐 꼭 주의!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React JSX 문법]]></title><description><![CDATA[JSX란?
JSX는 자바스크립트의 확장 문법인데요. 리액트로 코드를 작성할 때 HTML 문법과 비슷한 이 JSX 문법을 활용하면 훨씬 더 편리하게 화면에 나타낼 코드를 작성할 수가 있게 됩니다. import ReactDOM from 'react-do…]]></description><link>https://nicorobinv.github.io/React-study_1/</link><guid isPermaLink="false">https://nicorobinv.github.io/React-study_1/</guid><pubDate>Fri, 20 Aug 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;JSX란?
JSX는 자바스크립트의 확장 문법인데요. 리액트로 코드를 작성할 때 HTML 문법과 비슷한 이 JSX 문법을 활용하면 훨씬 더 편리하게 화면에 나타낼 코드를 작성할 수가 있게 됩니다.&lt;/p&gt;
&lt;p&gt;import ReactDOM from &apos;react-dom&apos;;&lt;/p&gt;
&lt;p&gt;ReactDOM.render(&lt;h1&gt;안녕 리액트!&lt;/h1&gt;, document.getElementById(&apos;root&apos;));
JSX 문법
JSX는 자바스크립트로 HTML과 같은 문법을 사용할 수 있도록 만들어주는 편리한 문법이지만, 그만큼 꼭 지켜야 할 규칙들도 있습니다.&lt;/p&gt;
&lt;p&gt;HTML과 다른 속성명&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;속성명은 카멜 케이스로 작성하기!
JSX 문법에서도 태그에 속성을 지정해 줄 수 있습니다. 단, 여러 단어가 조합된 몇몇 속성들을 사용할 때는 반드시 카멜 케이스(Camel Case)로 작성해야 합니다.
사실 여러 단어가 조합된 HTML 속성들이 많진 않지만, 예를 들면 onclick, onblur, onfocus 등과 같은 이벤트 속성이나, tabindex 같은 속성들이 있습니다.
이런 속성들은 모두 onClick, onBlur, onFocus, onMouseDown, onMouseOver, tabIndex 처럼 작성하는 것이죠!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;import ReactDOM from &apos;react-dom&apos;;&lt;/p&gt;
&lt;p&gt;ReactDOM.render(
&lt;button onClick= ... &gt;클릭!&lt;/button&gt;,
document.getElementById(&apos;root&apos;)
);
단, 예외적으로 HTML에서 비표준 속성을 다룰 때 활용하는 data-* 속성은 카멜 케이스(Camel Case)가 아니라 기존의 HTML 문법 그대로 작성하셔야 합니다.&lt;/p&gt;
&lt;p&gt;import ReactDOM from &apos;react-dom&apos;;&lt;/p&gt;
&lt;p&gt;ReactDOM.render(&lt;/p&gt;
  &lt;div&gt;
    상태 변경: 
    &lt;button className=&quot;btn&quot; data-status=&quot;대기중&quot;&gt;대기중&lt;/button&gt;
    &lt;button className=&quot;btn&quot; data-status=&quot;진행중&quot;&gt;진행중&lt;/button&gt;
    &lt;button className=&quot;btn&quot; data-status=&quot;완료&quot;&gt;완료&lt;/button&gt;
  &lt;/div&gt;,
  document.getElementById(&apos;root&apos;)
);
2. 자바스크립트 예약어와 같은 속성명은 사용할 수 없다!
JSX 문법도 결국은 자바스크립트 문법이기 때문에, for나 class처럼 자바스크립트의 문법에 해당하는 예약어와 똑같은 이름의 속성명은 사용할 수 없습니다.
그래서 HTML의 for의 경우에는 자바스크립트의 반복문 키워드 for와 겹치기 때문에 htmlFor로, HTML의 class 속성도 자바스크립트의 클래스 키워드 class와 겹치기 때문에 className으로 작성해 주어야 합니다.
&lt;p&gt;React 공식 문서 - 어트리뷰트의 차이&lt;/p&gt;
&lt;p&gt;import ReactDOM from &apos;react-dom&apos;;&lt;/p&gt;
&lt;p&gt;ReactDOM.render(&lt;/p&gt;
  &lt;form&gt;
    &lt;label htmlFor=&quot;name&quot;&gt;이름&lt;/label&gt;
    &lt;input id=&quot;name&quot; className=&quot;name-input&quot; type=&quot;text&quot; /&gt;
  &lt;/form&gt;,
  document.getElementById(&apos;root&apos;)
);
반드시 하나의 요소로 감싸기 - Fragment
JSX 문법을 활용할 때는 반드시 하나의 요소로 감싸주어야 합니다. 그래서 아래 코드처럼 여러 개의 요소를 작성하면 오류가 발생하는데요.
&lt;p&gt;import ReactDOM from &apos;react-dom&apos;;&lt;/p&gt;
&lt;p&gt;ReactDOM.render(&lt;/p&gt;
  &lt;p&gt;안녕&lt;/p&gt;
  &lt;p&gt;리액트!&lt;/p&gt;,
  document.getElementById(&apos;root&apos;)
);
이럴 때는 아래 코드처럼 여러 태그를 감싸는 부모 태그를 만들어 하나의 요소로 만들어 주어야 합니다.
&lt;p&gt;import ReactDOM from &apos;react-dom&apos;;&lt;/p&gt;
&lt;p&gt;ReactDOM.render(&lt;/p&gt;
  &lt;div&gt;
    &lt;p&gt;안녕&lt;/p&gt;
    &lt;p&gt;리액트!&lt;/p&gt;
  &lt;/div&gt;,
  document.getElementById(&apos;root&apos;)
);
하지만 이렇게 작성한다면 때로는 꼭 필요하지 않은 부모 태그가 작성될 수 있겠죠? 그럴 땐 Fragment로 감싸주면 의미 없는 부모 태그를 만들지 않아도 여러 요소를 작성할 수 있습니다.
&lt;p&gt;import { Fragment } from &apos;react&apos;;
import ReactDOM from &apos;react-dom&apos;;&lt;/p&gt;
&lt;p&gt;ReactDOM.render(
&lt;Fragment&gt;&lt;/p&gt;
&lt;p&gt;안녕&lt;/p&gt;
&lt;p&gt;리액트!&lt;/p&gt;
&lt;/Fragment&gt;,
document.getElementById(&apos;root&apos;)
);
참고로 Fragment는 아래 코드처럼 빈 태그로 감싸는 단축 문법으로 활용할 수도 있습니다.
&lt;p&gt;import ReactDOM from &apos;react-dom&apos;;&lt;/p&gt;
&lt;p&gt;ReactDOM.render(
&amp;#x3C;&gt;&lt;/p&gt;
&lt;p&gt;안녕&lt;/p&gt;
&lt;p&gt;리액트!&lt;/p&gt;
&lt;/&gt;,
document.getElementById(&apos;root&apos;)
);
자바스크립트 표현식 넣기
JSX 문법에서 중괄호({})를 활용하면 자바스크립트 표현식을 넣을 수 있습니다.
&lt;p&gt;import ReactDOM from &apos;react-dom&apos;;&lt;/p&gt;
&lt;p&gt;const product = &apos;맥북&apos;;&lt;/p&gt;
&lt;p&gt;ReactDOM.render(&lt;/p&gt;
  &lt;h1&gt;나만의 {product} 주문하기&lt;/h1&gt;,
  document.getElementById(&apos;root&apos;)
);
이런 부분들을 잘 활용하면, 아래 코드처럼 중괄호 안에서 문자열을 조합할 수도 있고 변수에 이미지 주소를 할당해서 img 태그의 src 속성값을 전달해 줄 수도 있고, 이벤트 핸들러를 좀 더 편리하게 등록할 수도 있습니다.
&lt;p&gt;import ReactDOM from &apos;react-dom&apos;;&lt;/p&gt;
&lt;p&gt;const product = &apos;MacBook&apos;;
const model = &apos;Air&apos;;
const imageUrl = &apos;&lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/1/1e/MacBook_with_Retina_Display.png/500px-MacBook_with_Retina_Display.png&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://upload.wikimedia.org/wikipedia/commons/thumb/1/1e/MacBook_with_Retina_Display.png/500px-MacBook_with_Retina_Display.png&lt;/a&gt;&apos;&lt;/p&gt;
&lt;p&gt;function handleClick(e) {
alert(&apos;곧 도착합니다!&apos;);
}&lt;/p&gt;
&lt;p&gt;ReactDOM.render(
&amp;#x3C;&gt;&lt;/p&gt;
&lt;h1&gt;{product + &apos; &apos; + model} 주문하기&lt;/h1&gt;
&lt;img src={imageUrl} alt=&quot;제품 사진&quot; /&gt;
&lt;button onClick={handleClick}&gt;확인&lt;/button&gt;
&lt;/&gt;,
document.getElementById(&apos;root&apos;)
);
단, JSX 문법에서 중괄호는 자바스크립트 표현식을 다룰 때 활용하기 때문에, 중괄호 안에서 for, if문 등의 문장은 다룰 수 없다는 점은 꼭 기억해 주세요.
그런데도 만약 JSX 문법을 활용할 때 조건문이 꼭 필요하다면 조건 연산자를, 반복문이 꼭 필요하다면 배열의 반복 메소드를 활용하자.</content:encoded></item><item><title><![CDATA[Git 협업하기 정리 노트]]></title><description><![CDATA[git fetch : 로컬 레포지토리에서 현재 HEAD가 가리키는 브랜치의 업스트림(upstream) 브랜치로부터 최신 커밋들을 가져옴(가져오기만 한다는 점에서, 가져와서 머지까지 하는 git pull과는 차이가 있음)
git blame : 특정 파…]]></description><link>https://nicorobinv.github.io/Git-study_5/</link><guid isPermaLink="false">https://nicorobinv.github.io/Git-study_5/</guid><pubDate>Tue, 17 Aug 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;git fetch : 로컬 레포지토리에서 현재 HEAD가 가리키는 브랜치의 업스트림(upstream) 브랜치로부터 최신 커밋들을 가져옴(가져오기만 한다는 점에서, 가져와서 머지까지 하는 git pull과는 차이가 있음)
git blame : 특정 파일의 내용 한줄한줄이 어떤 커밋에 의해 생긴 것인지 출력
git revert : 특정 커밋에서 이루어진 작업을 되돌리는(취소하는) 커밋을 새로 생성&lt;/p&gt;</content:encoded></item></channel></rss>